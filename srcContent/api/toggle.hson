{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `.toggle() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-toggle">.toggle()</a></h2>
<div class="summary">
Creates a function that switches between the two given states for the list.</div>

<div class="availability">Web module only.</div><h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">list.toggle(cssClasses)</div>
<div class="syntax">list.toggle(state1, state2)</div>
<div class="syntax">list.toggle(state1, state2, durationMs)</div>
<div class="syntax">list.toggle(state1, state2, durationMs, linearity)</div>
<div class="syntax">list.toggle(state1, state2, durationMs, interpolationFunction)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="toggle_cssClasses" class=""><a name="toggle_cssClasses"><var>cssClasses</var></a></dt>
<dd class="">a string containing space-separated CSS class names to toggle. Classes are disabled in the first state
and enabled in the second.</dd>
<dt id="toggle_state1" class=""><a name="toggle_state1"><var>state1</var></a></dt>
<dd class="">a property map in <code><a href='set.html'>set()</a></code> syntax describing the initial state of the properties. The properties will automatically be set when the
<span class="var">toggle()</span> function is created. The properties will be set for all elements of the list.</dd>
<dt id="toggle_state2" class=""><a name="toggle_state2"><var>state2</var></a></dt>
<dd class="">a property map describing the second state of the properties. Uses <code><a href='set.html'>set()</a></code> syntax, like the other state.</dd>
<dt id="toggle_durationMs" class=""><a name="toggle_durationMs"><var>durationMs (optional)</var></a></dt>
<dd class="">if set, the duration of the animation in milliseconds. By default, there is no animation and the
properties will be changed immediately.</dd>
<dt id="toggle_linearity" class=""><a name="toggle_linearity"><var>linearity (optional)</var></a></dt>
<dd class="">defines whether the animation should be linear (1), very smooth (0) or something in between. Default: 0. Ignored if durationMs is 0.</dd>
<dt id="toggle_interpolationFunc" class=""><a name="toggle_interpolationFunc"><var>interpolationFunc (optional)</var></a></dt>
<dd class="">an interpolation <code>function(startValue, endValue, t)</code> for the animation which will be called every
time an interpolated value is required:
<dl>
<dt>startValue</dt><dd>The start value of the transition.</dd>
<dt>endValue</dt><dd>The end value of the transition.</dd>
<dt>t</dt><dd>A value between 0 and 1 that specifies the state of the transition.</dd>
<dt class="returnValue">(callback return value)</dt><dd>The value at the time <span class="var">t</span>.</dd>
</dl></dd>
<dt id="toggle_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2 inSyntax3 inSyntax4"><a name="toggle_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2 inSyntax3 inSyntax4">a toggle function <code>function(newState)</code> that will toggle between the two states, or set a specific state.
<dl>
<dt>newState (optional)</dt><dd>If a boolean <span class="var">true</var or <span class="var">false</span> is given,
the toggle will set the first or second state, respectively. If called with any other value, or without a value,
the function toggles to the other state.</dd>
</dl></dd>
</dl>

<h4>Description</h4>
<div class="description"><p>
Creates a function that switches between the two given states for the list. The states use the <code><a href='set.html'>set()</a></code> property syntax. You can also
just pass a string of CSS classes, as you do with <span class="var">set()</span>.</p><p>If no duration is given, the returned function changes the state immediately using <code><a href='set.html'>set()</a></code>. If a duration has been passed, the returned function
uses <code><a href='animate.html'>animate()</a></code> to smoothly transition the state. If the returned function is invoked while an animation is running, it interrupts the
animation and returns to the other state.</p><p>See also <code><a href='dial.html'>dial()</a></code> for a similar function that allows you to interpolate between two states.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Creates a toggle function that changes the background color of the page.
<pre>
var light = $('body').set({$backgroundColor: #000}, {$backgroundColor: #fff});
light();      // toggles state to second state
light(false); // sets first state (background color to #000).
light(true);  // sets second state (background color to #fff).
light();      // toggles state to first state
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Takes the previous function, but adds it as an onclick event handler that toggles the color.
<pre>
var light = $('body').toggle({$backgroundColor: #000}, {$backgroundColor: #fff});
$('#mySwitch').on('click', light);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Using an animated transition by passing a duration:
<pre>
var dimmer = $('body').toggle({$backgroundColor: #000}, {$backgroundColor: #fff}, 500);
$('#mySwitch').on('click', dimmer);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Toggling CSS classes using the full syntax:
<pre>
var t = $('#myElement').toggle({$: '-myClass1 -myClass2'}, {$: '+myClass1 +myClass2'});
$('#myController').on('click', t);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>There is a shortcut for toggling CSS classes. Just list them space-separated in a string:
<pre>
var t = $('#myElement').toggle('myClass1 myClass2');
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a> <span class="tocMod">Web</span>
</li><li><a href="length.html">list.length</a> <span class="tocMod">Web, Util</span>
</li><li><a href="dollardollar.html">$$()</a> <span class="tocMod">Web</span>
</li><li><a href="defer.html">$.defer()</a> 
</li><li><a href="delay.html">$.delay()</a> 
</li><li><a href="getcookie.html">$.getCookie()</a> 
</li><li><a href="loop.html">$.loop()</a> <span class="tocMod">Web</span>
</li><li><a href="off.html">$.off()</a> <span class="tocMod">Web</span>
</li><li><a href="parsejson.html">$.parseJSON()</a> <span class="tocMod">Web</span>
</li><li><a href="ready.html">$.ready()</a> <span class="tocMod">Web</span>
</li><li><a href="request.html">$.request()</a> <span class="tocMod">Web</span>
</li><li><a href="setcookie.html">$.setCookie()</a> 
</li><li><a href="tojson.html">$.toJSON()</a> <span class="tocMod">Web</span>
</li><li><a href="wait.html">$.wait()</a> 
</li><li><a href="add.html">.add()</a> <span class="tocMod">Web</span>
</li><li><a href="addafter.html">.addAfter()</a> <span class="tocMod">Web</span>
</li><li><a href="addbefore.html">.addBefore()</a> <span class="tocMod">Web</span>
</li><li><a href="addfront.html">.addFront()</a> <span class="tocMod">Web</span>
</li><li><a href="animate.html">.animate()</a> <span class="tocMod">Web</span>
</li><li><a href="array.html">.array()</a> <span class="tocMod">Util</span>
</li><li><a href="call.html">.call()</a> <span class="tocMod">Util</span>
</li><li><a href="clone.html">.clone()</a> <span class="tocMod">Web</span>
</li><li><a href="collect.html">.collect()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="contains.html">.contains()</a> <span class="tocMod">Util</span>
</li><li><a href="dial.html">.dial()</a> <span class="tocMod">Web</span>
</li><li><a href="each.html">.each()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="endswith.html">.endsWith()</a> <span class="tocMod">Util</span>
</li><li><a href="equals.html">.equals()</a> <span class="tocMod">Util</span>
</li><li><a href="fill.html">.fill()</a> <span class="tocMod">Web</span>
</li><li><a href="filter.html">.filter()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="find.html">.find()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="findlast.html">.findLast()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="get.html">.get()</a> <span class="tocMod">Web</span>
</li><li><a href="ht.html">.ht()</a> <span class="tocMod">Web</span>
</li><li><a href="intersection.html">.intersection()</a> <span class="tocMod">Util</span>
</li><li><a href="is.html">.is()</a> <span class="tocMod">Web</span>
</li><li><a href="join.html">.join()</a> <span class="tocMod">Util</span>
</li><li><a href="keys.html">.keys()</a> <span class="tocMod">Util</span>
</li><li><a href="map.html">.map()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="offset.html">.offset()</a> 
</li><li><a href="on.html">.on()</a> <span class="tocMod">Web</span>
</li><li><a href="onchange.html">.onOver()</a> <span class="tocMod">Web</span>
</li><li><a href="onover.html">.onOver()</a> <span class="tocMod">Web</span>
</li><li><a href="only.html">.only()</a> <span class="tocMod"></span>
</li><li><a href="remove.html">.remove()</a> <span class="tocMod">Web</span>
</li><li><a href="replace.html">.replace()</a> <span class="tocMod">Web</span>
</li><li><a href="reverse.html">.reverse()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="select.html">.select()</a> <span class="tocMod">Web</span>
</li><li><a href="set.html">.set()</a> <span class="tocMod">Web</span>
</li><li><a href="sort.html">.sort()</a> <span class="tocMod">Util</span>
</li><li><a href="startswith.html">.startsWith()</a> <span class="tocMod">Util</span>
</li><li><a href="sub.html">.sub()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="text.html">.text()</a> <span class="tocMod">Web</span>
</li><li><a href="toobject.html">.toObject()</a> <span class="tocMod">Util</span>
</li><li><a href="toggle.html">.toggle()</a> <span class="tocMod">Web</span>
</li><li><a href="trav.html">.trav()</a> <span class="tocMod">Web</span>
</li><li><a href="trigger.html">.trigger()</a> <span class="tocMod">Web</span>
</li><li><a href="uniq.html">.uniq()</a> <span class="tocMod">Util</span>
</li><li><a href="unite.html">.unite()</a> <span class="tocMod">Util</span>
</li><li><a href="values.html">.values()</a> <span class="tocMod"></span>
</li><li><a href="ee.html">EE()</a> <span class="tocMod">Web</span>
</li><li><a href="html.html">HTML()</a> <span class="tocMod">Web</span>
</li><li><a href="M.html">M</a> <span class="tocMod">Web, Util</span>
</li><li><a href="list.html">Minified Lists</a> <span class="tocMod">Web, Util</span>
</li><li><a href="promiseClass.html">Promise</a> <span class="tocMod">Web, Util</span>
</li><li><a href="underscore.html">_()</a> <span class="tocMod">Util</span>
</li><li><a href="bind.html">_.bind()</a> <span class="tocMod">Util</span>
</li><li><a href="copyobj.html">_.copyObj()</a> <span class="tocMod">Util</span>
</li><li><a href="dateadd.html">_.dateAdd()</a> <span class="tocMod">Util</span>
</li><li><a href="dateclone.html">_.dateClone()</a> <span class="tocMod">Util</span>
</li><li><a href="datediff.html">_.dateDiff()</a> <span class="tocMod">Util</span>
</li><li><a href="datemidnight.html">_.dateMidnight()</a> <span class="tocMod">Util</span>
</li><li><a href="eachobj.html">_.eachObj()</a> <span class="tocMod">Util</span>
</li><li><a href="escapehtml.html">_.escapeHtml()</a> <span class="tocMod">Util</span>
</li><li><a href="escaperegexp.html">_.escapeRegExp()</a> <span class="tocMod">Util</span>
</li><li><a href="filterobj.html">_.filterObj()</a> <span class="tocMod">Util</span>
</li><li><a href="format.html">_.format()</a> <span class="tocMod">Util</span>
</li><li><a href="formathtml.html">_.formatHtml()</a> <span class="tocMod">Util</span>
</li><li><a href="formatvalue.html">_.formatValue()</a> <span class="tocMod">Util</span>
</li><li><a href="isbool.html">_.isBool()</a> <span class="tocMod">Util</span>
</li><li><a href="isdate.html">_.isDate()</a> <span class="tocMod">Util</span>
</li><li><a href="isfunction.html">_.isFunction()</a> <span class="tocMod">Util</span>
</li><li><a href="islist.html">_.isList()</a> <span class="tocMod">Util</span>
</li><li><a href="isnumber.html">_.isNumber()</a> <span class="tocMod">Util</span>
</li><li><a href="isobject.html">_.isObject()</a> <span class="tocMod">Util</span>
</li><li><a href="isstring.html">_.isString()</a> <span class="tocMod">Util</span>
</li><li><a href="isvalue.html">_.isValue()</a> <span class="tocMod">Util</span>
</li><li><a href="mapobj.html">_.mapObj()</a> <span class="tocMod">Util</span>
</li><li><a href="pad.html">_.pad()</a> <span class="tocMod">Util</span>
</li><li><a href="parsedate.html">_.parseDate()</a> <span class="tocMod">Util</span>
</li><li><a href="parsenumber.html">_.parseNumber()</a> <span class="tocMod">Util</span>
</li><li><a href="partial.html">_.partial()</a> <span class="tocMod">Util</span>
</li><li><a href="range.html">_.range()</a> <span class="tocMod"></span>
</li><li><a href="template.html">_.template()</a> <span class="tocMod">Util</span>
</li><li><a href="tostring.html">_.toString()</a> <span class="tocMod">Util</span>
</li><li><a href="trim.html">_.trim()</a> <span class="tocMod">Util</span>
</li><li><a href="objvalues.html">_.values()</a> <span class="tocMod">Util</span>
</li><li><a href="promise.html">promise()</a> 
</li><li><a href="always.html">promise.always()</a> 
</li><li><a href="error.html">promise.error()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="state.html">promise.state</a> <span class="tocMod">Web, Util</span>
</li><li><a href="then.html">promise.then()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="require.html">require()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
