{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `.dial() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-dial">.dial()</a></h2>
<div class="summary">
Creates a function allows you to set all list members to one of two states or any transitional state between them.</div>

<h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">list.dial(state1, state2)</div>
<div class="syntax">list.dial(state1, state2, linearity)</div>
<div class="syntax">list.dial(state1, state2, interpolationFunc)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="dial_state1" class=""><a name="dial_state1"><var>state1</var></a></dt>
<dd class="">a property map in <code><a href='set.html'>set()</a></code> syntax describing the first state of the properties. The properties will be set for all elements of the list.</dd>
<dt id="dial_state2" class=""><a name="dial_state2"><var>state2</var></a></dt>
<dd class="">a property map describing the second state of the properties. Uses <code><a href='set.html'>set()</a></code> syntax, like the first state.</dd>
<dt id="dial_linearity" class=""><a name="dial_linearity"><var>linearity (optional)</var></a></dt>
<dd class="">defines whether the animation should be linear (1), very smooth (0) or something in between. Default: 0. Ignored if durationMs is 0.</dd>
<dt id="dial_interpolationFunc" class=""><a name="dial_interpolationFunc"><var>interpolationFunc (optional)</var></a></dt>
<dd class="">an interpolation <code>function(startValue, endValue, t)</code> which will be called every
values when an interpolated value is required:
<dl>
<dt>startValue</dt><dd>The start value of the transition.</dd>
<dt>endValue</dt><dd>The end value of the transition.</dd>
<dt>t</dt><dd>A value between 0 and 1 that specifies the state of the transition.</dd>
<dt class="returnValue">(callback return value)</dt><dd>The value at the time <var>t</var>.</dd>
</dl></dd>
<dt id="dial_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2"><a name="dial_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2">a dial function <code>function(newPosition)</code> that will set the state.
<dl>
<dt>newPosition</dt><dd>If 0 or lower, set the list members to the first step.
If 1 or higher, sets them to the second state. For any value betweeen 0 and 1, the list members
will be set to interpolated values.</dd>
</dl></dd>
</dl>

<h4>Description</h4>
<div class="description"><p>
Creates a function allows you to set all list members to one of two states or any transitional state between them.
The states are specified using a <code><a href='set.html'>set()</a></code> - compatible object maps containing the properties to set.
Pass 0 to the function to set the first state for all list members, or 1 to set the second state.
Any value between 0 and 1 will cause dial to interpolate between the two states.
Interpolation is supported for all numeric values, including those that have a string suffix (e.g. 'px' unit),
and for colors in all CSS notations (e.g. '#f00', '#f0d1ff' or 'rgb(23,0,100)').</p><p>You can use the optional third parameter to define the kind of interpolation to use for values between 0 and 1.
If 0, the dial uses a smooth, cubic interpolation. For 1 it uses linear interpolation. Values between 0 and 1
will mix both algorithms. You can also specify an interpolation function.</p><p>See also <code><a href='toggle.html'>toggle()</a></code> for a similar function that allows you to set two states and automatically animate them.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Creates a dial function that changes the background color of the page.
<pre>
var light = $('body').dial({$backgroundColor: #000}, {$backgroundColor: #fff});
light(0);     // set the first state (background color to #000)
light(1);     // sets second state (background color to #fff).
light(0.5);  // interpolates between two states, sets background color to #888.
light(0.25);  // interpolates between two states, sets background color to #444.
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="length.html">list.length</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="defer.html">$.defer()</a>
</li><li><a href="delay.html">$.delay()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="wait.html">$.wait()</a>
</li><li><a href="listunderscore.html">._</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="array.html">.array()</a>
</li><li><a href="call.html">.call()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="contains.html">.contains()</a>
</li><li><a href="dial.html">.dial()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="endswith.html">.endsWith()</a>
</li><li><a href="equals.html">.equals()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="findlast.html">.findLast()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="ht.html">.ht()</a>
</li><li><a href="intersection.html">.intersection()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="join.html">.join()</a>
</li><li><a href="keys.html">.keys()</a>
</li><li><a href="map.html">.map()</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="reverse.html">.reverse()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sort.html">.sort()</a>
</li><li><a href="startswith.html">.startsWith()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toobject.html">.toObject()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="uniq.html">.uniq()</a>
</li><li><a href="unite.html">.unite()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="html.html">HTML()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promiseClass.html">Promise</a>
</li><li><a href="underscore.html">_()</a>
</li><li><a href="bind.html">_.bind()</a>
</li><li><a href="copyobj.html">_.copyObj()</a>
</li><li><a href="dateadd.html">_.dateAdd()</a>
</li><li><a href="dateclone.html">_.dateClone()</a>
</li><li><a href="datediff.html">_.dateDiff()</a>
</li><li><a href="datemidnight.html">_.dateMidnight()</a>
</li><li><a href="eachobj.html">_.eachObj()</a>
</li><li><a href="escapehtml.html">_.escapeHtml()</a>
</li><li><a href="escaperegexp.html">_.escapeRegExp()</a>
</li><li><a href="filterobj.html">_.filterObj()</a>
</li><li><a href="formathtml.html">_.format()</a>
</li><li><a href="format.html">_.format()</a>
</li><li><a href="formatvalue.html">_.formatValue()</a>
</li><li><a href="isbool.html">_.isBool()</a>
</li><li><a href="isdate.html">_.isDate()</a>
</li><li><a href="isfunction.html">_.isFunction()</a>
</li><li><a href="islist.html">_.isList()</a>
</li><li><a href="isnumber.html">_.isNumber()</a>
</li><li><a href="isobject.html">_.isObject()</a>
</li><li><a href="isstring.html">_.isString()</a>
</li><li><a href="isvalue.html">_.isValue()</a>
</li><li><a href="mapobj.html">_.mapObj()</a>
</li><li><a href="pad.html">_.pad()</a>
</li><li><a href="parsedate.html">_.parseDate()</a>
</li><li><a href="parsenumber.html">_.parseNumber()</a>
</li><li><a href="partial.html">_.partial()</a>
</li><li><a href="range.html">_.range()</a>
</li><li><a href="template.html">_.template()</a>
</li><li><a href="tostring.html">_.toString()</a>
</li><li><a href="trim.html">_.trim()</a>
</li><li><a href="promise.html">promise()</a>
</li><li><a href="always.html">promise.always()</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="state.html">promise.state</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
