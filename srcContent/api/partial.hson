{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `_.partial() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-partial">_.partial()</a></h2>
<div class="summary">Creates a new function that calls the given function with some arguments pre-filled.</div>

<div class="availability">Util module only.</div><h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">_.partial(f, beforeArgs)</div>
<div class="syntax">_.partial(f, beforeArgs, afterArgs)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="partial_f" class=""><a name="partial_f"><var>f</var></a></dt>
<dd class="">the function to bind</dd>
<dt id="partial_beforeArgs" class=""><a name="partial_beforeArgs"><var>beforeArgs</var></a></dt>
<dd class="">either a list of values to insert in front of the arguments, or a single non-list value to put in front. If null or not set,
there won't be any arguments inserted. If you need to insert a <span class="var">null</span>, <span class="var">undefined</span> or a list, just wrap them in an array
(e.g. <code>[null]</code>).</dd>
<dt id="partial_afterArgs" class=""><a name="partial_afterArgs"><var>afterArgs (optional)</var></a></dt>
<dd class="">either a list of values to append to the end of the arguments, or a single non-list value to append. If null or not set,
there won't be any arguments appended. If you need to append a <span class="var">null</span>, <span class="var">undefined</span> or a list, just wrap them in an array
(e.g. <code>[null]</code>).</dd>
<dt id="partial_RETURN" class="returnValue inSyntax0 inSyntax1"><a name="partial_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1">the resulting string</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Creates a new function that calls the given function with some arguments pre-filled. You can specify one or more arguments to
be put in front of the arguments list as well as arguments that will be appended to the argument list.</p><p>See also <code><a href='undefinedbind.html'>_.bind()</a></code>, if you want to set 'this' as well.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Create functions that divide:
<pre>function div(a, b) { return a / b; }
var div5 = _.partial(add, 5);         // like function(a) { return 5 / a; }
var divBy5 = _.partial(add, null, 5); // like function(a) { return a / 5; }
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Create functions that remove characters from the beginning and/or end of a string:
<pre>// This function multiplies the first <span class="var">count</span> items of the <span class="var">list</span> by <span class="var">factor</span>
function multiply(list, count, factor) { return list.map(function(v, index) { return index &lt; count ? factor * v : v; }); }</p><p>var mul3by2 = _.partial(multiply, null, [3, 2]);
var r1 = mul10by2(_(1, 2, 3, 4, 5)); // returns _(2, 4, 6, 4, 5)</p><p>var mul123 = _.partial(multiply, [_(1, 2, 3)]);  // array wrapper required to pass a list!
var r2 = mul123(2, 5);                 // returns _(5, 10, 3)</p><p>var mul12345By2 = _.partial(multiply, [_(1, 2, 3, 4, 5)], 2);  // array wrapper required!
var r3 = mul12345By2(3);                 // returns _(2, 4, 6, 4, 5)
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a> <span class="tocMod">Web</span>
</li><li><a href="length.html">list.length</a> <span class="tocMod">Web, Util</span>
</li><li><a href="dollardollar.html">$$()</a> <span class="tocMod">Web</span>
</li><li><a href="defer.html">$.defer()</a> 
</li><li><a href="delay.html">$.delay()</a> 
</li><li><a href="getcookie.html">$.getCookie()</a> 
</li><li><a href="loop.html">$.loop()</a> <span class="tocMod">Web</span>
</li><li><a href="off.html">$.off()</a> <span class="tocMod">Web</span>
</li><li><a href="parsejson.html">$.parseJSON()</a> <span class="tocMod">Web</span>
</li><li><a href="ready.html">$.ready()</a> <span class="tocMod">Web</span>
</li><li><a href="request.html">$.request()</a> <span class="tocMod">Web</span>
</li><li><a href="setcookie.html">$.setCookie()</a> 
</li><li><a href="tojson.html">$.toJSON()</a> <span class="tocMod">Web</span>
</li><li><a href="wait.html">$.wait()</a> 
</li><li><a href="add.html">.add()</a> <span class="tocMod">Web</span>
</li><li><a href="addafter.html">.addAfter()</a> <span class="tocMod">Web</span>
</li><li><a href="addbefore.html">.addBefore()</a> <span class="tocMod">Web</span>
</li><li><a href="addfront.html">.addFront()</a> <span class="tocMod">Web</span>
</li><li><a href="animate.html">.animate()</a> <span class="tocMod">Web</span>
</li><li><a href="array.html">.array()</a> <span class="tocMod">Util</span>
</li><li><a href="call.html">.call()</a> <span class="tocMod">Util</span>
</li><li><a href="clone.html">.clone()</a> <span class="tocMod">Web</span>
</li><li><a href="collect.html">.collect()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="contains.html">.contains()</a> <span class="tocMod">Util</span>
</li><li><a href="dial.html">.dial()</a> <span class="tocMod">Web</span>
</li><li><a href="each.html">.each()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="endswith.html">.endsWith()</a> <span class="tocMod">Util</span>
</li><li><a href="equals.html">.equals()</a> <span class="tocMod">Util</span>
</li><li><a href="fill.html">.fill()</a> <span class="tocMod">Web</span>
</li><li><a href="filter.html">.filter()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="find.html">.find()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="findlast.html">.findLast()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="get.html">.get()</a> <span class="tocMod">Web</span>
</li><li><a href="ht.html">.ht()</a> <span class="tocMod">Web</span>
</li><li><a href="intersection.html">.intersection()</a> <span class="tocMod">Util</span>
</li><li><a href="is.html">.is()</a> <span class="tocMod">Web</span>
</li><li><a href="join.html">.join()</a> <span class="tocMod">Util</span>
</li><li><a href="keys.html">.keys()</a> <span class="tocMod">Util</span>
</li><li><a href="map.html">.map()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="offset.html">.offset()</a> 
</li><li><a href="on.html">.on()</a> <span class="tocMod">Web</span>
</li><li><a href="onchange.html">.onOver()</a> <span class="tocMod">Web</span>
</li><li><a href="onover.html">.onOver()</a> <span class="tocMod">Web</span>
</li><li><a href="only.html">.only()</a> <span class="tocMod"></span>
</li><li><a href="remove.html">.remove()</a> <span class="tocMod">Web</span>
</li><li><a href="replace.html">.replace()</a> <span class="tocMod">Web</span>
</li><li><a href="reverse.html">.reverse()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="select.html">.select()</a> <span class="tocMod">Web</span>
</li><li><a href="set.html">.set()</a> <span class="tocMod">Web</span>
</li><li><a href="sort.html">.sort()</a> <span class="tocMod">Util</span>
</li><li><a href="startswith.html">.startsWith()</a> <span class="tocMod">Util</span>
</li><li><a href="sub.html">.sub()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="text.html">.text()</a> <span class="tocMod">Web</span>
</li><li><a href="toobject.html">.toObject()</a> <span class="tocMod">Util</span>
</li><li><a href="toggle.html">.toggle()</a> <span class="tocMod">Web</span>
</li><li><a href="trav.html">.trav()</a> <span class="tocMod">Web</span>
</li><li><a href="trigger.html">.trigger()</a> <span class="tocMod">Web</span>
</li><li><a href="uniq.html">.uniq()</a> <span class="tocMod">Util</span>
</li><li><a href="unite.html">.unite()</a> <span class="tocMod">Util</span>
</li><li><a href="values.html">.values()</a> <span class="tocMod"></span>
</li><li><a href="ee.html">EE()</a> <span class="tocMod">Web</span>
</li><li><a href="html.html">HTML()</a> <span class="tocMod">Web</span>
</li><li><a href="M.html">M</a> <span class="tocMod">Web, Util</span>
</li><li><a href="list.html">Minified Lists</a> <span class="tocMod">Web, Util</span>
</li><li><a href="promiseClass.html">Promise</a> <span class="tocMod">Web, Util</span>
</li><li><a href="underscore.html">_()</a> <span class="tocMod">Util</span>
</li><li><a href="bind.html">_.bind()</a> <span class="tocMod">Util</span>
</li><li><a href="copyobj.html">_.copyObj()</a> <span class="tocMod">Util</span>
</li><li><a href="dateadd.html">_.dateAdd()</a> <span class="tocMod">Util</span>
</li><li><a href="dateclone.html">_.dateClone()</a> <span class="tocMod">Util</span>
</li><li><a href="datediff.html">_.dateDiff()</a> <span class="tocMod">Util</span>
</li><li><a href="datemidnight.html">_.dateMidnight()</a> <span class="tocMod">Util</span>
</li><li><a href="eachobj.html">_.eachObj()</a> <span class="tocMod">Util</span>
</li><li><a href="escapehtml.html">_.escapeHtml()</a> <span class="tocMod">Util</span>
</li><li><a href="escaperegexp.html">_.escapeRegExp()</a> <span class="tocMod">Util</span>
</li><li><a href="filterobj.html">_.filterObj()</a> <span class="tocMod">Util</span>
</li><li><a href="format.html">_.format()</a> <span class="tocMod">Util</span>
</li><li><a href="formathtml.html">_.formatHtml()</a> <span class="tocMod">Util</span>
</li><li><a href="formatvalue.html">_.formatValue()</a> <span class="tocMod">Util</span>
</li><li><a href="isbool.html">_.isBool()</a> <span class="tocMod">Util</span>
</li><li><a href="isdate.html">_.isDate()</a> <span class="tocMod">Util</span>
</li><li><a href="isfunction.html">_.isFunction()</a> <span class="tocMod">Util</span>
</li><li><a href="islist.html">_.isList()</a> <span class="tocMod">Util</span>
</li><li><a href="isnumber.html">_.isNumber()</a> <span class="tocMod">Util</span>
</li><li><a href="isobject.html">_.isObject()</a> <span class="tocMod">Util</span>
</li><li><a href="isstring.html">_.isString()</a> <span class="tocMod">Util</span>
</li><li><a href="isvalue.html">_.isValue()</a> <span class="tocMod">Util</span>
</li><li><a href="mapobj.html">_.mapObj()</a> <span class="tocMod">Util</span>
</li><li><a href="pad.html">_.pad()</a> <span class="tocMod">Util</span>
</li><li><a href="parsedate.html">_.parseDate()</a> <span class="tocMod">Util</span>
</li><li><a href="parsenumber.html">_.parseNumber()</a> <span class="tocMod">Util</span>
</li><li><a href="partial.html">_.partial()</a> <span class="tocMod">Util</span>
</li><li><a href="range.html">_.range()</a> <span class="tocMod"></span>
</li><li><a href="template.html">_.template()</a> <span class="tocMod">Util</span>
</li><li><a href="tostring.html">_.toString()</a> <span class="tocMod">Util</span>
</li><li><a href="trim.html">_.trim()</a> <span class="tocMod">Util</span>
</li><li><a href="objvalues.html">_.values()</a> <span class="tocMod">Util</span>
</li><li><a href="promise.html">promise()</a> 
</li><li><a href="always.html">promise.always()</a> 
</li><li><a href="error.html">promise.error()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="state.html">promise.state</a> <span class="tocMod">Web, Util</span>
</li><li><a href="then.html">promise.then()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="require.html">require()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
