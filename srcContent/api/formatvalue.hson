{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `_.formatValue() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-formatvalue">_.formatValue()</a></h2>
<div class="summary">
Formats a single value as a string, using the given format template.</div>

<h4>Syntax</h4>
<div class="syntaxVariant">
<div class="syntax">_.formatValue(format, value)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="formatvalue_format" class=""><a name="formatvalue_format"><var>format</var></a></dt>
<dd class="">the format that describes the output</dd>
<dt id="formatvalue_value" class=""><a name="formatvalue_value"><var>value</var></a></dt>
<dd class="">the value to format. Either a Date, a number, a string or a value that can be converted to a string.</dd>
<dt id="formatvalue_RETURN" class="returnValue inSyntax0"><a name="formatvalue_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0">the string-formatted value</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>
Formats a single value as a string, using the given format template.  It has support for numbers, dates, booleans and strings.</p><p><b>Choice Formatting</b><br/>
With a choice format, you can map input values into output values. In the format string the choices are separated by pipes ('|')
and each choice has the format <code>&ltcmp>&ltvalue>:&lt;result></code>:
<ul><li>&lt;cmp> is a comparison operator ('=', '>', '&lt;', '>=', '&lt;=') and can be omitted for equality.</li>
<li>&lt;value> is the value as string.</li>
<li>&lt;result> is the result, either a string or a number format</li></ul>
You can have a default choice at the end without &lt;cmp> or &lt;value>.</p><p><b>Examples</b>
<pre>_.formatValue('true:is True|isFalse', value);
_.formatValue('&lt;5:under 5|&gt;=15:at least 15|=7:is seven|some other number', value);
_.formatValue('1:one item|2:two items|&gt;3:many items', value);
_.formatValue('ERR:error|WARN:warning|INFO:info|debug', value);
</pre></p><p><b>Number Formatting</b><br/>
Number formatting allows you to specify the number of digits before and optionally after the decimal separator, the decimal separator itself
as well as how to group digits. The following characters are used in the format:
<table></p><p><tr><th>Character</th><th>Description</th></tr>
<tr><td>#</td><td>Optional digit before decimal separator.</td></tr>
<tr><td>0</td><td>Required digit before decimal separator (0 if number is smaller).</td></tr>
<tr><td>_</td><td>Optional digit after decimal separator.</td></tr>
<tr><td>9</td><td>Required digit after decimal separator (0 if number is smaller).</td></tr>
<tr><td>.</td><td>Either decimal separator or group separator, depending on position.</td></tr>
<tr><td>,</td><td>Either decimal separator or group separator, depending on position.</td></tr>
</table></p><p><b>Examples</b>
<pre>var v1  = _.formatValue('#', 15); // '15'
var v2  = _.formatValue('####', 15);   // '15' (same as '#')
var v3  = _.formatValue('0000', 15);   // '0015'
var v4  = _.formatValue('#.___', 15.14274); // '15.143'
var v5  = _.formatValue('#.999', 15.14274); // '15.143'
var v6  = _.formatValue('#.___', 15.1);     // '15.1'
var v7  = _.formatValue('#.999', 15.1);     // '15.100'
var v8  = _.formatValue('000,999', 15.1);   // '015,100'
var v9 = _.formatValue('#.___', 15);     // '15'
var v10 = _.formatValue('#.999', 15);    // '15.000'
var v11 = _.formatValue('#,___', 15.1);  // '15,1' (comma as decimal separator)
var v12 = _.formatValue('###,###,###', 92548);    // '92,548' (grouped digits)
var v13 = _.formatValue('000,000.___', 92548.42); // '92,548.42'
var v14 = _.formatValue('000.000,___', 92548.42); // '92.548,42' (comma as separator)
var v15 = _.formatValue('&lt;10:#.99|&lt;100:#.9|#', 7.356); // '7.36' (choice format)
var v16 = _.formatValue('&lt;10:#.99|&lt;100:#.9|#', 25.04); // '25.0'
var v17 = _.formatValue('&lt;10:#.99|&lt;100:#.9|#', 71.51); // '72'
</pre></p><p><b>Date Formatting</b><br/>
In a date format, there are a number of reserved characters that represent parts of the date. If you repeat the same character, you
specify the minimum number of digits. Some elements allow a comma-separated list of translations in angular brackets, see below.
<table>
<tr><th>Character</th><th>Description</th></tr>
<tr><td>y</td><td>Year (4 digits)</td></tr>
<tr><td>Y</td><td>Year (2 digits)</td></tr>
<tr><td>M</td><td>Month (1-12)</td></tr>
<tr><td>n/td><td>Month as short name ('Jan', 'Feb'...). Supports translations.</td></tr>
<tr><td>N</td><td>Month as long name ('January', 'February'...). Supports translations.</td></tr>
<tr><td>d</td><td>Day of month (1-31)</td></tr>
<tr><td>m</td><td>Minutes (0-59)</td></tr>
<tr><td>H</td><td>Hours in 24h format (0-23)</td></tr>
<tr><td>h</td><td>Hours in 12h format (1-12)</td></tr>
<tr><td>K</td><td>Hours in 0-based 12h format (0-11)</td></tr>
<tr><td>k</td><td>Hours in 1-based 24h format (1-24)</td></tr>
<tr><td>s</td><td>Seconds (0-59)</td></tr>
<tr><td>S</td><td>Milliseconds (0-999)</td></tr>
<tr><td>a</td><td>Either 'am' or 'pm'. Supports translations.</td></tr>
<tr><td>w</td><td>Day of week as short name ('Sun', 'Mon'...). Supports translations.</td></tr>
<tr><td>W</td><td>Day of week as long name ('Sunday', 'Monday'...). Supports translations.</td></tr>
<tr><td>z</td><td>Timezone offset, e.g. '+0700'</td></tr>
</table>
<var>formatValue</var> also supports formatting a date in a different timezone. You only need to put the timezone in brackets at the front of
the format, e.g. '[+0100]'.</p><p><b>Examples</b>
<pre>var now = new Date();
var v1  = _.formatValue('y-M-d', now);       // e.g. '2013-7-9'
var v2  = _.formatValue('yyyy-MM-dd', now);  // e.g. '2013-07-09'
var v3  = _.formatValue('yyyy-MM-ddTHH:mm:ss.SS z', now); // e.g. '2013-07-09T23:07:38.472 +0700'
var v4  = _.formatValue('MM/dd/YY h:mm:ss a', now);       // e.g. '07/09/13 11:07:38 pm'
var v5  = _.formatValue('dd.MM.yyyy HH:mm:ss', now);      // e.g. '09.07.2013 23:07:38'
var v6  = _.formatValue('H:mm', now);                // e.g. '23:07'
var v7  = _.formatValue('W, N d y', now);            // e.g. 'Tuesday, July 9 2013'
var v8  = _.formatValue('Nd', now);                  // e.g. 'July9'
var v9  = _.formatValue('d.N[Januar,Februar,Mï¿½rz,April,Mai,Juni,Juli,'+
            'August,September,Oktober,November,Dezember]', now); // German translation: '9. Juli'
var v10 = _.formatValue('[+0100]yyyy-MM-dd h:mm a', now);  // different timezone: '2013-07-09 5:07 pm'
</pre></p><p></p></div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="length.html">list.length</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="defer.html">$.defer()</a>
</li><li><a href="delay.html">$.delay()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="wait.html">$.wait()</a>
</li><li><a href="listunderscore.html">._</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="array.html">.array()</a>
</li><li><a href="call.html">.call()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="contains.html">.contains()</a>
</li><li><a href="dial.html">.dial()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="endswith.html">.endsWith()</a>
</li><li><a href="equals.html">.equals()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="findlast.html">.findLast()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="ht.html">.ht()</a>
</li><li><a href="intersection.html">.intersection()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="join.html">.join()</a>
</li><li><a href="keys.html">.keys()</a>
</li><li><a href="map.html">.map()</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="reverse.html">.reverse()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sort.html">.sort()</a>
</li><li><a href="startswith.html">.startsWith()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toobject.html">.toObject()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="uniq.html">.uniq()</a>
</li><li><a href="unite.html">.unite()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="html.html">HTML()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promiseClass.html">Promise</a>
</li><li><a href="underscore.html">_()</a>
</li><li><a href="bind.html">_.bind()</a>
</li><li><a href="copyobj.html">_.copyObj()</a>
</li><li><a href="dateadd.html">_.dateAdd()</a>
</li><li><a href="dateclone.html">_.dateClone()</a>
</li><li><a href="datediff.html">_.dateDiff()</a>
</li><li><a href="datemidnight.html">_.dateMidnight()</a>
</li><li><a href="eachobj.html">_.eachObj()</a>
</li><li><a href="escapehtml.html">_.escapeHtml()</a>
</li><li><a href="escaperegexp.html">_.escapeRegExp()</a>
</li><li><a href="filterobj.html">_.filterObj()</a>
</li><li><a href="formathtml.html">_.format()</a>
</li><li><a href="format.html">_.format()</a>
</li><li><a href="formatvalue.html">_.formatValue()</a>
</li><li><a href="isbool.html">_.isBool()</a>
</li><li><a href="isdate.html">_.isDate()</a>
</li><li><a href="isfunction.html">_.isFunction()</a>
</li><li><a href="islist.html">_.isList()</a>
</li><li><a href="isnumber.html">_.isNumber()</a>
</li><li><a href="isobject.html">_.isObject()</a>
</li><li><a href="isstring.html">_.isString()</a>
</li><li><a href="isvalue.html">_.isValue()</a>
</li><li><a href="mapobj.html">_.mapObj()</a>
</li><li><a href="pad.html">_.pad()</a>
</li><li><a href="parsedate.html">_.parseDate()</a>
</li><li><a href="parsenumber.html">_.parseNumber()</a>
</li><li><a href="partial.html">_.partial()</a>
</li><li><a href="range.html">_.range()</a>
</li><li><a href="template.html">_.template()</a>
</li><li><a href="tostring.html">_.toString()</a>
</li><li><a href="trim.html">_.trim()</a>
</li><li><a href="promise.html">promise()</a>
</li><li><a href="always.html">promise.always()</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="state.html">promise.state</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
