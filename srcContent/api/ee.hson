{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `EE() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-ee">EE()</a></h2>
<div class="summary">Creates a new Element Factory.</div>

<div class="availability">Web module only.</div><h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">EE(elementName)</div>
<div class="syntax">EE(elementName, properties)</div>
<div class="syntax">EE(elementName, children)</div>
<div class="syntax">EE(elementName, properties, children)</div>
<div class="syntax">EE(elementName, properties, children, onCreate)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="ee_elementName" class=""><a name="ee_elementName"><var>elementName</var></a></dt>
<dd class="">the element name to create (e.g. 'div')</dd>
<dt id="ee_properties" class=""><a name="ee_properties"><var>properties (optional)</var></a></dt>
<dd class="">an object which contains a map of attributes and other values. Uses the <code><a href='set.html'>set()</a></code> syntax:
Attribute values are prefixed with '@', data attributes with '%', CSS styles with '$' and
regular properties can be set without prefix.
If the attribute value is null, the attribute will omitted (styles and properties can be set to null).
In order to stay compatible with Internet Explorer 7 and earlier, you should not set the
attributes '@class' and '@style'. Instead set the property 'className' instead of '@class' and set
styles using the '$' syntax.</dd>
<dt id="ee_children" class=""><a name="ee_children"><var>children (optional)</var></a></dt>
<dd class="">a node or a list of nodes to be added as children. Strings will be converted to text nodes.
Functions will be invoked and their return value will be used. Lists can be
nested and will then automatically be flattened. Null elements in lists will be ignored.
The syntax is exactly like <code><a href='add.html'>add()</a></code>.</dd>
<dt id="ee_onCreate" class=""><a name="ee_onCreate"><var>onCreate (optional)</var></a></dt>
<dd class="">a <code>function(elementList)</code> that will be called each time an element had been created.
<dl><dt>elementList</dt><dd>The newly created element wrapped in a Minified list.  </dd></dl>
The function's return value will be ignored.
The callback allows you, for example, to add event handlers to the element using <code><a href='on.html'>on()</a></code>.</dd>
<dt id="ee_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2 inSyntax3 inSyntax4"><a name="ee_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2 inSyntax3 inSyntax4">a Element Factory function, which returns a Minified list containing the DOM HTMLElement that has been created or
modified, as only element. The factory function can be called repeatedly and will create a new set of DOM nodes on
each invocation.</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Creates a new Element Factory. An Element Factory is a function without arguments that returns a <a href='list.html'>Minified list</a>
containing a newly created DOM element, optionally with attributes and children.
Typically it will be used to insert elements into the DOM tree using <code><a href='add.html'>add()</a></code> or a similar function.</p><p>Please note that the function <span class="var">EE</span> will not be automatically exported by Minified. You should always import it
using the recommended import statement:
<pre>
var MINI = require('minified'), $ = MINI.$, $$ = MINI.$$, EE = MINI.EE;
</pre></p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Creating a simple factory for a &lt;span> element with some text:
<pre>
var mySpan = EE('span', 'Hello World');
</pre>
creates a factory to produce this:
<pre>
 &lt;span>Hello World&lt;/span>
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Adding the 'Hello World; &lt;span> element to all elements with the class '.greeting':
<pre>
$('.greeting').add(EE('span', 'Hello World'));
</p></div>
<h4>Example</h4>
<div class="example"><p>Creating a factory for a &lt;span> element with style and some text:
<pre>
var span2 = EE('span', {'@title': 'Greetings'}, 'Hello World');
</pre>
The factory creates this:
<pre>
 &lt;span title="Greetings">Hello World&lt;/span>
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Creating a &lt;form> element with two text fields, labels and a submit button:
<pre>var myForm = EE('form', {'@method': 'post'}, [
    EE('label', {'@for': 'nameInput'}, 'Name:'),
    EE('input', {'@id': 'nameInput', '@type': 'input'}),
    EE('br'),
    EE('label', {'@for': 'ageInput'}, 'Age:'),
    EE('input', {'@id': 'ageInput', '@type': 'input'}),
    EE('br'),
    EE('input', {'@type': 'submit, '@value': 'Join'})
]);
</pre>
results in (newlines and indentation added for readability):
<pre>
	&lt;form method="post>
    &lt;label for="nameInput">Name:&lt;/label>
    &lt;input id="nameInput" type="input"/>
    &lt;br/>
    &lt;label for="ageInput"/>Age:&lt;/label>
    &lt;input id="ageInput" type="input"/>
    &lt;br/>
    &lt;input value="Join" type="submit"/>
 &lt;/form>
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>If you only want to add an attribute under a certain condition,
a simple trick is to pass null as value if you do not need it:
<pre>
var myInput = EE('input', {
				'@id': 'myCheckbox',
				'@type': 'checkbox',
				'@checked': shouldBeChecked() ? 'checked' : null
			});
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>You can set styles directly using a $ prefix for the name:
<pre>
var myStylesSpan = EE('span', {$color: "red", $fontWeight: "bold"}, "I'm styled");
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>To add event handlers, use the fourth argument:
<pre>
var myStylesSpan = EE('input', {'@name': "myInput"}, null, function(e) {
    e.on('change', inputChanged);
});
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a> <span class="tocMod">Web</span>
</li><li><a href="length.html">list.length</a> <span class="tocMod">Web, Util</span>
</li><li><a href="dollardollar.html">$$()</a> <span class="tocMod">Web</span>
</li><li><a href="defer.html">$.defer()</a> 
</li><li><a href="delay.html">$.delay()</a> 
</li><li><a href="getcookie.html">$.getCookie()</a> <span class="tocMod">Web</span>
</li><li><a href="loop.html">$.loop()</a> <span class="tocMod">Web</span>
</li><li><a href="off.html">$.off()</a> <span class="tocMod">Web</span>
</li><li><a href="parsejson.html">$.parseJSON()</a> <span class="tocMod">Web</span>
</li><li><a href="ready.html">$.ready()</a> <span class="tocMod">Web</span>
</li><li><a href="request.html">$.request()</a> <span class="tocMod">Web</span>
</li><li><a href="setcookie.html">$.setCookie()</a> <span class="tocMod">Web</span>
</li><li><a href="tojson.html">$.toJSON()</a> <span class="tocMod">Web</span>
</li><li><a href="wait.html">$.wait()</a> 
</li><li><a href="add.html">.add()</a> <span class="tocMod">Web</span>
</li><li><a href="addafter.html">.addAfter()</a> <span class="tocMod">Web</span>
</li><li><a href="addbefore.html">.addBefore()</a> <span class="tocMod">Web</span>
</li><li><a href="addfront.html">.addFront()</a> <span class="tocMod">Web</span>
</li><li><a href="animate.html">.animate()</a> <span class="tocMod">Web</span>
</li><li><a href="array.html">.array()</a> <span class="tocMod">Util</span>
</li><li><a href="call.html">.call()</a> <span class="tocMod">Util</span>
</li><li><a href="clone.html">.clone()</a> <span class="tocMod">Web</span>
</li><li><a href="collect.html">.collect()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="contains.html">.contains()</a> <span class="tocMod">Util</span>
</li><li><a href="dial.html">.dial()</a> <span class="tocMod">Web</span>
</li><li><a href="each.html">.each()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="endswith.html">.endsWith()</a> <span class="tocMod">Util</span>
</li><li><a href="equals.html">.equals()</a> <span class="tocMod">Util</span>
</li><li><a href="fill.html">.fill()</a> <span class="tocMod">Web</span>
</li><li><a href="filter.html">.filter()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="find.html">.find()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="findlast.html">.findLast()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="get.html">.get()</a> <span class="tocMod">Web</span>
</li><li><a href="ht.html">.ht()</a> <span class="tocMod">Web</span>
</li><li><a href="intersection.html">.intersection()</a> <span class="tocMod">Util</span>
</li><li><a href="is.html">.is()</a> <span class="tocMod">Web</span>
</li><li><a href="join.html">.join()</a> <span class="tocMod">Util</span>
</li><li><a href="keys.html">.keys()</a> <span class="tocMod">Util</span>
</li><li><a href="map.html">.map()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="offset.html">.offset()</a> 
</li><li><a href="on.html">.on()</a> <span class="tocMod">Web</span>
</li><li><a href="onover.html">.onOver()</a> <span class="tocMod">Web</span>
</li><li><a href="only.html">.only()</a> <span class="tocMod"></span>
</li><li><a href="remove.html">.remove()</a> <span class="tocMod">Web</span>
</li><li><a href="replace.html">.replace()</a> <span class="tocMod">Web</span>
</li><li><a href="reverse.html">.reverse()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="select.html">.select()</a> <span class="tocMod">Web</span>
</li><li><a href="set.html">.set()</a> <span class="tocMod">Web</span>
</li><li><a href="sort.html">.sort()</a> <span class="tocMod">Util</span>
</li><li><a href="startswith.html">.startsWith()</a> <span class="tocMod">Util</span>
</li><li><a href="sub.html">.sub()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="text.html">.text()</a> <span class="tocMod">Web</span>
</li><li><a href="toobject.html">.toObject()</a> <span class="tocMod">Util</span>
</li><li><a href="toggle.html">.toggle()</a> <span class="tocMod">Web</span>
</li><li><a href="trav.html">.trav()</a> <span class="tocMod">Web</span>
</li><li><a href="trigger.html">.trigger()</a> <span class="tocMod">Web</span>
</li><li><a href="uniq.html">.uniq()</a> <span class="tocMod">Util</span>
</li><li><a href="unite.html">.unite()</a> <span class="tocMod">Util</span>
</li><li><a href="values.html">.values()</a> <span class="tocMod"></span>
</li><li><a href="ee.html">EE()</a> <span class="tocMod">Web</span>
</li><li><a href="html.html">HTML()</a> <span class="tocMod">Web</span>
</li><li><a href="M.html">M</a> <span class="tocMod">Web, Util</span>
</li><li><a href="list.html">Minified Lists</a> <span class="tocMod">Web, Util</span>
</li><li><a href="promiseClass.html">Promise</a> <span class="tocMod">Web, Util</span>
</li><li><a href="underscore.html">_()</a> <span class="tocMod">Util</span>
</li><li><a href="bind.html">_.bind()</a> <span class="tocMod">Util</span>
</li><li><a href="copyobj.html">_.copyObj()</a> <span class="tocMod">Util</span>
</li><li><a href="dateadd.html">_.dateAdd()</a> <span class="tocMod">Util</span>
</li><li><a href="dateclone.html">_.dateClone()</a> <span class="tocMod">Util</span>
</li><li><a href="datediff.html">_.dateDiff()</a> <span class="tocMod">Util</span>
</li><li><a href="datemidnight.html">_.dateMidnight()</a> <span class="tocMod">Util</span>
</li><li><a href="eachobj.html">_.eachObj()</a> <span class="tocMod">Util</span>
</li><li><a href="escapehtml.html">_.escapeHtml()</a> <span class="tocMod">Util</span>
</li><li><a href="escaperegexp.html">_.escapeRegExp()</a> <span class="tocMod">Util</span>
</li><li><a href="filterobj.html">_.filterObj()</a> <span class="tocMod">Util</span>
</li><li><a href="format.html">_.format()</a> <span class="tocMod">Util</span>
</li><li><a href="formathtml.html">_.formatHtml()</a> <span class="tocMod">Util</span>
</li><li><a href="formatvalue.html">_.formatValue()</a> <span class="tocMod">Util</span>
</li><li><a href="isbool.html">_.isBool()</a> <span class="tocMod">Util</span>
</li><li><a href="isdate.html">_.isDate()</a> <span class="tocMod">Util</span>
</li><li><a href="isfunction.html">_.isFunction()</a> <span class="tocMod">Util</span>
</li><li><a href="islist.html">_.isList()</a> <span class="tocMod">Util</span>
</li><li><a href="isnumber.html">_.isNumber()</a> <span class="tocMod">Util</span>
</li><li><a href="isobject.html">_.isObject()</a> <span class="tocMod">Util</span>
</li><li><a href="isstring.html">_.isString()</a> <span class="tocMod">Util</span>
</li><li><a href="isvalue.html">_.isValue()</a> <span class="tocMod">Util</span>
</li><li><a href="mapobj.html">_.mapObj()</a> <span class="tocMod">Util</span>
</li><li><a href="pad.html">_.pad()</a> <span class="tocMod">Util</span>
</li><li><a href="parsedate.html">_.parseDate()</a> <span class="tocMod">Util</span>
</li><li><a href="parsenumber.html">_.parseNumber()</a> <span class="tocMod">Util</span>
</li><li><a href="partial.html">_.partial()</a> <span class="tocMod">Util</span>
</li><li><a href="range.html">_.range()</a> <span class="tocMod"></span>
</li><li><a href="template.html">_.template()</a> <span class="tocMod">Util</span>
</li><li><a href="tostring.html">_.toString()</a> <span class="tocMod">Util</span>
</li><li><a href="trim.html">_.trim()</a> <span class="tocMod">Util</span>
</li><li><a href="objvalues.html">_.values()</a> <span class="tocMod">Util</span>
</li><li><a href="promise.html">promise()</a> 
</li><li><a href="always.html">promise.always()</a> 
</li><li><a href="error.html">promise.error()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="state.html">promise.state</a> <span class="tocMod">Web, Util</span>
</li><li><a href="then.html">promise.then()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="require.html">require()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
