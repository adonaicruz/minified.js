{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `$.setCookie() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-setcookie">$.setCookie()</a></h2>
<div class="summary">Creates, updates or deletes a cookie.</div>

<h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">$.setCookie(name, value)</div>
<div class="syntax">$.setCookie(name, value, dateOrDays)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="setcookie_name" class=""><a name="setcookie_name"><var>name</var></a></dt>
<dd class="">the name of the cookie. This should ideally be an alphanumeric name, as it will not be escaped by Minified and this
guarantees compatibility with all systems.
If it contains a '=', it is guaranteed not to work, because it breaks the cookie syntax.</dd>
<dt id="setcookie_value" class=""><a name="setcookie_value"><var>value</var></a></dt>
<dd class="">the value of the cookie. All characters can be used. Non-Alphanumeric other than "*@-_+./" will be escaped using the
JavaScript <var>escape()</var> function, unless you set the optional <var>dontEscape</var> parameter.</dd>
<dt id="setcookie_dateOrDays" class=""><a name="setcookie_dateOrDays"><var>dateOrDays (optional)</var></a></dt>
<dd class="">specifies when the cookie expires. Can be either a Date object or a number that specifies the
amount of days. If not set, the cookie has a session lifetime, which means it will be deleted as soon as the
browser has been closed. If the number negative or the date in the past, the cookie will be deleted.</dd>
<dt id="setcookie_dontEscape" class=""><a name="setcookie_dontEscape"><var>dontEscape (optional)</var></a></dt>
<dd class="">if set, the cookie value is not escaped. Note that without escaping you can not use every possible
character (e.g. ";" will break the cookie), but it may be needed for interoperability with systems that need
some non-alphanumeric characters unescaped or use a different escaping algorithm.</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Creates, updates or deletes a cookie. If there is an an existing cookie
of the same name, will be overwritten with the new value and settings.</p><p>To delete a cookie, overwrite it with an expiration date in the past. The easiest way to do this is to
use <code>-1</code> as third argument.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Reads the existing cookie 'numberOfVisits', increases the number and stores it:
<pre>
var visits = $.getCookie('numberOfVisits');
$.setCookie('numberOfVisits',
                     visits ? (parseInt(visits) + 1) : 1,   // if cookie not set, start with 1
                     365);                                  // store for 365 days
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Deletes the cookie 'numberOfVisits':
<pre>
$.setCookie('numberOfVisits', '', -1);
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="dial.html">.dial()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="length.html">.length</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promiseClass.html">Promise</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
