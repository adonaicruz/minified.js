{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `.fill() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-fill">.fill()</a></h2>
<div class="summary">Sets the content of the list's HTML elements, replacing old content.</div>

<h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">list.fill()</div>
<div class="syntax">list.fill(text)</div>
<div class="syntax">list.fill(factoryFunction)</div>
<div class="syntax">list.fill(list)</div>
<div class="syntax">list.fill(node)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="fill_text" class=""><a name="fill_text"><var>text</var></a></dt>
<dd class="">a string to set as text node of the list elements</dd>
<dt id="fill_factoryFunction" class=""><a name="fill_factoryFunction"><var>factoryFunction</var></a></dt>
<dd class="">a <code>function(listItem, listIndex)</code> that will be invoked for each list element to create the nodes:
<dl><dt>listItem</dt><dd>The list element that will receive the new children.</dd>
<dt>listIndex</dt><dd>The index of the list element that will receive the new children.</dd>
<dt class="returnValue">(callback return value)<dt><dd>The node(s) to be added to the list element.
Can be either a string for a text node, an HTML element or a list containing strings, lists, functions and/or DOM nodes.
If a function is returned or in the list, it will be invoked recursively with the same arguments.</dd></dl>
</dd>
<dt id="fill_list" class=""><a name="fill_list"><var>list</var></a></dt>
<dd class="">a list containing text, functions, nodes or more list. Please note that if you have DOM nodes in this list
and attempt to add them to more than one element, the result is <var>undefined</var>. You should always use factories if your
Minified list contains more than one item.</dd>
<dt id="fill_node" class=""><a name="fill_node"><var>node</var></a></dt>
<dd class="">a DOM node to set <strong>only in the first element</strong> of the list.
</dd>
<dt id="fill_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2 inSyntax3 inSyntax4"><a name="fill_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2 inSyntax3 inSyntax4">the current list</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Sets the content of the list's HTML elements, replacing old content. If a string has been given, it will be added as text node.
DOM nodes will be added directly. If you pass a list, all its elements will be added using the rules above.</p><p>When you pass a DOM node and the target list has more than one element, the original node will be added to the first list element,
and <a href='clone.html'>clones for all following list elements.</p><p>You can also pass a function as argument. It will be invoked for each list element to create the node to add.  The
function can return all values allowed by <var>add()</var>, including another function to be called.</p><p></a>EE(), <code><a href='html.html'>HTML()</a></code> and <code><a href='clone.html'>clone()</a></code> are compatible with <var>add()</var> and can help you create new HTML ndoes.</p><p>Call <var>fill()</var> without arguments to remove all children from a node.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Using the following HTML:
<pre>
&lt;div id="status">Done&lt;/div>
</pre>
<var>fill()</var> with a simple string replaces the element's content with the text:
<pre>
$('#status').fill('Please Wait..');
</pre>
Results in:
<pre>
&lt;div id="status">Please Wait..&lt;/div>
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Pass an Element Factory to replace the old content with that:
<pre>
$('#status').fill(EE('span', {'className': 'bold'}, 'Please Wait...'));
</pre>
With the previous example's HTML, this would create this:
<pre>
&lt;div id="status">&lt;span class='bold'>Please Wait..&lt;/span>&lt;/div>
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>You can also pass a list of elements and texts:
<pre>
$('#status').fill(['Here', EE('br'), 'are', EE('br'), 'four', EE('br'), 'lines.]);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Or a complete structure built using EE:
<pre>
$('#myListContainer').fill([
    EE('h2', 'My List'),
    EE('ol', [EE('li', 'First Item'), EE('li', 'Second Item'), EE('li', 'Third Item')])
]);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>You can write a factory function that re-creates the list for every instance:
<pre>
$('.listContainers').fill(function(e, index) { return [
    EE('h2', 'List Number '+index),
    EE('ol', [EE('li', 'First Item'),
    EE('li', 'Second Item'),
    EE('li', 'Third Item')
])]});
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p><var>fill()</var> without arguments deletes the content of the list elements:
<pre>
$('.listContainers').fill();
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="dial.html">.dial()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="length.html">.length</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promiseClass.html">Promise</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
