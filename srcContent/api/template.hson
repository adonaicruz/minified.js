{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `_.template() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-template">_.template()</a></h2>
<div class="summary">Parses a Handlebars-like template to create a reusable template function.</div>

<h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">_.template(template)</div>
<div class="syntax">_.template(template, escapeFunction)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="template_template" class=""><a name="template_template"><var>template</var></a></dt>
<dd class="">The template as a string using the syntax described above.</dd>
<dt id="template_escapeFunction" class=""><a name="template_escapeFunction"><var>escapeFunction (optional)</var></a></dt>
<dd class="">The callback <code>function(inputString)</code> that will be used
to escape all output:
<dl><dt>inputString</dt><dd>The string to escape.</dd>
<dt class="returnValue">(callback return value)</dt><dd>The escaped string.</dd></dl>
If no escapeFunction has been given, the output will not be escaped.
<code><a href='_.escapehtml.html'>_.escapeHtml()</a></code> can be used as a escape function for HTML.
See <code><a href='_.htmlformat.html'>_.htmlFormat()</a></code> for a version of <var>format()</var> that already includes HTML escaping.</dd>
<dt id="template_RETURN" class="returnValue inSyntax0 inSyntax1"><a name="template_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1">the value returned by the last invocation of <var>func</var></dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Parses a Handlebars-like template to create a reusable template function.</p><p>The syntax of the template uses a syntax that superficially looks like
<a href="http://handlebarsjs.com/">Handlebars</a>. Unlike Handlebars, it is based on raw JavaScript expressions and thus gives you
complete freedom, but also offers you shortcuts for formatting, iteration and conditionals.</p><p>Every template can receive exactly one object as input. If you need more than one value as input, put all requires values
into an object.</p><p>Use double curly braces to embed a JavaScript expression and insert its result:
<pre>{{a}} plus {{b}} is {{a+b}}</pre></p><p>To use such a template, create it with <var>template()</var> and then execute the resulting function:
<pre>var myTemplate = _.template('{{a}} plus {{b}} is {{a+b}}');
var result = myTemplate({a: 5, b: 7});</pre>
If you pass an object as input, its properties will be mapped using JavaScript's <code>with</code>
statement and are available as variables throughout the template.</p><p>If you have only a simple value to render, you can pass it directly and access it through the pre-defined
variable <var>obj</var>:
<pre>var myTemplate = _.template('The result is {{obj}}.');
var result = myTemplate(17);</pre>
Alternatively, you could also access the input as <var>this</var>, but be aware that JavaScript wraps simples types
such as Number and Boolean. <var>this</var> is the default, so you can omit it to get the same result:
<pre>var myTemplate = _.template('The result is {{ }}.');
var result = myTemplate(17);</pre></p><p>Minified templates can use <code><a href='_.formatvalue.html'>_.formatValue()</a></code> formats directly. Just separate them from the expression by
a double-colon:
<pre>The price is {{obj::#.00}}.</pre></p><p>Conditions can be expressed using <code>if</code> and <code>else</code>:
<pre>Hello {{if visits==0}}New{{else if visits&lt;10}}Returning{{else}}Regular{{/if}} Customer.<pre>
You can use any JavaScript expression as condition.</p><p>Use <code>each</code> to iterate through a list:
<pre>var myTemplate = _.template(
	   '{{each names}}{{this.firstName}} {{this.lastName}}{{/each}}');
var result = myTemplate({names: [{firstName: 'Joe', lastName: 'Jones'},
                                 {firstName: 'Marc', lastName: 'Meyer'}]});</pre>
<code>each</code> will iterate through the members of the given object. It
calls its body for each item and put a reference to the item into <var>this</var>.
Optionally, you can specify up to two variables to store the value in (instead of this) and
the zero-based index of the current item:
<pre>var myTemplate = _.template(
	   '{{each value, index: names}}{{index}}. {{value.firstName}} {{value.lastName}}{{/each}}');
</pre></p><p>If you do not pass an expression to <code>each</var>, it will take the list from <var>this</var>:
<pre>var myTemplate = _.template('{{each value:}}{{value}};{{/each}}');
var result = myTemplate([1, 2, 3]);</pre></p><p>Beside lists, you can also iterate through the properties of an object. The property name will be stored
in the first given parameter and the value in <var>this</var> and the second parameter:
<pre>var myTemplate = _.template('{{each key, value: nicknames}}{{key}}: {{value}}{{/each}}');
var result = myTemplate({nicknames: {Matt: 'Matthew', John: 'Jonathan'} });</pre></p><p>Shorter version of the previous example that uses <var>this</var> for the value:
<pre>var myTemplate = _.template('{{each key: nicknames}}{{key}}: {{this}}{{/each}}');</pre></p><p>If you do not need the key, you can omit the variable specification:
<pre>var myTemplate = _.template('{{each nicknames}}{{this}}{{/each}}');</pre></p><p>You can also define your own variables, using the regular JavaScript syntax, with 'var':
<pre>var myTemplate = _.template('{{var s=very.long.name, sum=a+b;}}{{s.desc}}, {{sum}}');</pre></p><p>In some situations, it may be inevitable to embed raw JavaScript in the template.
To embed JavaScript code, prefix the code with a '#':
<pre>var myTemplate = _.template(
    '{{each}}{{#var sum = 0; for (var i = 0; i &lt; 3; i++) sum += this.numbers[i]; }}{{sum}}{{/each}}');
var result = myTemplate([['Foreword', 'Intro'], ['Something', 'Something else']]);</pre></p><p>
By default, all output will be escaped. You can prevent this by using triple-curly-braces:
<pre>Here's the original: {{{rawText}}}</pre>.</p><p>The template's JavaScript code is executed in a sandbox without access to global variables. Minified defines the
following variables for you:
<table>
<tr><th>Name</th><th>Desciption</th></tr>
<tr><td>this</td><td>The template object outside of <code>each</code>. Inside eachs, the current value.</td></tr>
<tr><td>obj</td><td>The parameter given to the template function.</td></tr>
<tr><td>_</td><td>A reference to Minified Util.</td></tr>
<tr><td>esc</td><td>The escape function given when the template has been defined. If no function has been given,
                    a default function that returns the input unmodified.</td></tr>
<tr><td>print</td><td>A <code>function(text,...)</code> that appends one or more strings to the template result.</td></tr>
<tr><td>each</td><td>A <code>function(listOrObject, eachCallback)</code> that can iterate over lists or object properties.
The <var>eachCallback</var> is a <code>function(key, value)</code> for objects or <code>function(value, index)</code>
for arrays that will be invoked for each item.
</table></p><p>Every template you create is already cached, so it not an expensive operation to call <code><a href='_.template.html'>_.template()</a></code> a second
time with the same template. However, because of caching, you should be careful when creating templates
dynamically, as every new template requires memory that will not be freed.</p><p>See also <code><a href='_.format.html'>_.format()</a></code> as an alternative to using <code><a href='template.html'>template()</a></code>, as it will save you the template invocation.</p><p></p></div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="length.html">list.length</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="defer.html">$.defer()</a>
</li><li><a href="delay.html">$.delay()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="wait.html">$.wait()</a>
</li><li><a href="listunderscore.html">._</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="array.html">.array()</a>
</li><li><a href="call.html">.call()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="contains.html">.contains()</a>
</li><li><a href="dial.html">.dial()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="endswith.html">.endsWith()</a>
</li><li><a href="equals.html">.equals()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="findlast.html">.findLast()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="ht.html">.ht()</a>
</li><li><a href="intersection.html">.intersection()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="join.html">.join()</a>
</li><li><a href="keys.html">.keys()</a>
</li><li><a href="map.html">.map()</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="reverse.html">.reverse()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sort.html">.sort()</a>
</li><li><a href="startswith.html">.startsWith()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toobject.html">.toObject()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="uniq.html">.uniq()</a>
</li><li><a href="unite.html">.unite()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="html.html">HTML()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promiseClass.html">Promise</a>
</li><li><a href="underscore.html">_()</a>
</li><li><a href="bind.html">_.bind()</a>
</li><li><a href="copyobj.html">_.copyObj()</a>
</li><li><a href="dateadd.html">_.dateAdd()</a>
</li><li><a href="dateclone.html">_.dateClone()</a>
</li><li><a href="datediff.html">_.dateDiff()</a>
</li><li><a href="datemidnight.html">_.dateMidnight()</a>
</li><li><a href="eachobj.html">_.eachObj()</a>
</li><li><a href="escapehtml.html">_.escapeHtml()</a>
</li><li><a href="escaperegexp.html">_.escapeRegExp()</a>
</li><li><a href="filterobj.html">_.filterObj()</a>
</li><li><a href="formathtml.html">_.format()</a>
</li><li><a href="format.html">_.format()</a>
</li><li><a href="formatvalue.html">_.formatValue()</a>
</li><li><a href="isbool.html">_.isBool()</a>
</li><li><a href="isdate.html">_.isDate()</a>
</li><li><a href="isfunction.html">_.isFunction()</a>
</li><li><a href="islist.html">_.isList()</a>
</li><li><a href="isnumber.html">_.isNumber()</a>
</li><li><a href="isobject.html">_.isObject()</a>
</li><li><a href="isstring.html">_.isString()</a>
</li><li><a href="isvalue.html">_.isValue()</a>
</li><li><a href="mapobj.html">_.mapObj()</a>
</li><li><a href="pad.html">_.pad()</a>
</li><li><a href="parsedate.html">_.parseDate()</a>
</li><li><a href="parsenumber.html">_.parseNumber()</a>
</li><li><a href="partial.html">_.partial()</a>
</li><li><a href="range.html">_.range()</a>
</li><li><a href="template.html">_.template()</a>
</li><li><a href="tostring.html">_.toString()</a>
</li><li><a href="trim.html">_.trim()</a>
</li><li><a href="promise.html">promise()</a>
</li><li><a href="always.html">promise.always()</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="state.html">promise.state</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
