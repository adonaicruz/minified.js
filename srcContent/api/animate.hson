{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `.animate() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-animate">.animate()</a></h2>
<div class="summary">Animates the items of the list by modifying their properties, CSS styles and attributes.</div>

<h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">list.animate(properties)</div>
<div class="syntax">list.animate(properties, durationMs)</div>
<div class="syntax">list.animate(properties, durationMs, linearity)</div>
<div class="syntax">list.animate(properties, durationMs, interpolationFunc)</div>
<div class="syntax">list.animate(properties, durationMs, linearity, state)</div>
<div class="syntax">list.animate(properties, durationMs, interpolationFunc, state)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="animate_properties" class=""><a name="animate_properties"><var>properties</var></a></dt>
<dd class="">a property map describing the end values of the corresponding properties. The names can use the
set() syntax ('@' prefix for attributes, '$' for styles, '$$fade' for fading,  '$$slide' for slide effects,
'$$scrollX' and '$$scrollY' for scroll coordinates).
Values must be either numbers, numbers with units (e.g. "2 px") or colors ('rgb(r,g,b)', '#rrggbb' or '#rgb') or
a <code>function(oldValue, index, obj)</code>  to determine the new value. The function  will be invoked for each list element
to evaluate the new value:
<dl><dt>oldValue</dt><dd>The old value of the property to be changed, as returned by <code><a href='get.html'>get()</a></code>.
For the CSS style names, this is the computed style of the property </dd>
<dt>index</dt><dd>The list index of the object owning the property</dd>
<dt>obj</dt><dd>The list element owning the property.<dd>
<dt class="returnValue">(callback return value)</dt><dd>The destination value to be set.</dd></dl></dd>
<dt id="animate_durationMs" class=""><a name="animate_durationMs"><var>durationMs (optional)</var></a></dt>
<dd class="">the duration of the animation in milliseconds. Default: 500ms.</dd>
<dt id="animate_linearity" class=""><a name="animate_linearity"><var>linearity (optional)</var></a></dt>
<dd class="">defines whether the animation should be linear (1), very smooth (0) or something in between. Default: 0.</dd>
<dt id="animate_interpolationFunc" class=""><a name="animate_interpolationFunc"><var>interpolationFunc (optional)</var></a></dt>
<dd class="">an interpolation <code>function(startValue, endValue, t)</code> which will be
called every time an interpolated value is required:
<dl>
<dt>startValue</dt><dd>The start value of the transition.</dd>
<dt>endValue</dt><dd>The end value of the transition.</dd>
<dt>t</dt><dd>A value between 0 and 1 that specifies the state of the transition.</dd>
<dt class="returnValue">(callback return value)</dt><dd>The value at the time <var>t</var>.</dd>
</dl></dd>
<dt id="animate_state" class=""><a name="animate_state"><var>state (optional)</var></a></dt>
<dd class="">if set, the animation controller will write information about its state in this object. When <var>animate()</var> returns,
there will be a <var>stop()</var> function in the property <var>state.stop</var> that can be used to abort the animation.
The property <var>state.time</var> will be continously updated while the animation is running
and contains the number of milliseconds that have passed from the start, allowing you to track the progress of the animation.
If the animation finished, controller writes null into <var>state.time</var>. <var>state.stop</var> will not be
modified and can still be safely invoked even when the animation ended.</dd>
<dt id="animate_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2 inSyntax3 inSyntax4 inSyntax5"><a name="animate_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2 inSyntax3 inSyntax4 inSyntax5">a <a href='promise.html'>Promise</a> object to monitor the animation's progress.
It is fulfilled when the animation ended, and rejected if the animation had been stopped.
The fulfillment handler will be called as <code>function(list)</code>:
<dl><dt>list</dt><dd>A reference to the animated list.</dd></dl>
The rejection handler is called as <code>function()</code> without arguments.</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Animates the items of the list by modifying their properties, CSS styles and attributes. <var>animate()</var> can work with numbers, strings that contain exactly one
number, and with colors in the CSS notations 'rgb(r,g,b)', '#rrggbb' or '#rgb'.</p><p>When you invoke the function, it will first read all old values from the object and extract their numbers and colors. These start values will be compared to
the destination values that have been specified in the given properties. Then <var>animate()</var> will create a background task using <code><a href='$.loop.html'>$.loop()</a></code> that updates the
specified properties in frequent intervals so that they transition to their destination values.</p><p>The start values will be obtained using <code><a href='get.html'>get()</a></code>. It is recommended to set the start values using <code><a href='set.html'>set()</a></code> before you start the animation, even if this is not
always required.</p><p>You can define the kind of transition using the <var>linearity</var> parameter. If you omit it or pass 0, animate's default algorithm will cause a smooth transition
from the start value to the end value. If you pass 1, the transition will be linear, with a sudden start and end of the animation. Any value between 0 and 1
is also allowed and will give you a transition that is 'somewhat smooth'.</p><p>Instead of the <var>linearity</var> function you can also provide your own interpolation <code>function(startValue, endValue, t)</code> which will be
called every time an interpolated value is required. <var>startValue</var> and <var>endValue</var> define the start and end values. <var>t</var>
is a value between 0 and 1 that specifies the state of the transition. The function should return <var>startValue</var> for 0 and
<var>endValue</var> for 1. For values between 0 and 1, the function should return a transitional value.</p><p>If the start value of a property is a string containing a number, <var>animate()</var> will always ignore all the surrounding text and use the destination value as a template
for the value to write. This can cause problems if you mix units in CSS. For example, if the start value is '10%' and you specify an end value of '20px', animate
will do an animation from '10px' to '20px'. It is not able to convert units.</p><p><var>animate()</var> does not only support strings with units, but any string containing exactly one number. This allows you, among other things, with IE-specific CSS properties.
For example, you can transition from a start value 'alpha(opacity = 0)' to 'alpha(opacity = 100)'.</p><p>When you animate colors, <var>animate()</var> is able to convert between the three notations rgb(r,g,b), #rrggbb or #rgb. You can use them interchangeably, but you can not
use color names such as 'red'.</p><p>Instead of the end value, you can also specify a <code>function(oldValue, index, obj)</code> to calculate the actual end value.</p><p>To allow more complex animation, <var>animate()</var> returns a <a href='promise.html'>Promise</a> that is fulfulled when the animation has finished.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Move an element.
<pre>
$('#myMovingDiv').set({$left: '0px', $top: '0px'})                // start values
                 .animate({$left: '50px', $top: '100px'}, 1000);  // animation
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Change the color of an element:
<pre>
$('#myBlushingDiv').set({$backgroundColor: '#000000'})
                   .animate({$backgroundColor: '#ff0000'}, 1000);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Using a function to calulate the values for animation:
<pre>
$('#myMovingDiv').animate({$left: function(v) { return (parseFloat(v) + 100) + 'px'; }}, 1000);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Fade-out effect:
<pre>
$('#myFadingDiv').animate({$$fade: 0}, 1000);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Slide-in effect:
<pre>
$('#myInvisibleDiv').animate({$$slide: 1}, 1000);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Chained animation using <a href='promise.html'>Promise</a> callbacks. The element is first moved to the position 200/0, then to 200/200
         and finally moves to 100/100.
<pre>
var div = $('#myMovingDiv').set({$left: '0px', $top: '0px'});
div.animate({$left: '200px', $top: '0px'}, 600, 0)
   .then(function() {
          return div.animate({$left: '200px', $top: '200px'}, 800, 0);
   }).then(function() {
          return div.animate({$left: '100px', $top: '100px'}, 400);
   });
});
</pre>
</pre></p><p></p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="dial.html">.dial()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="length.html">.length</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promiseClass.html">Promise</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
