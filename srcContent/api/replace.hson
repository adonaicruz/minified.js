{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `.replace() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-replace">.replace()</a></h2>
<div class="summary">Replaces the list items with the the given node(s) in the DOM tree.</div>

<h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">list.replace(text)</div>
<div class="syntax">list.replace(factoryFunction)</div>
<div class="syntax">list.replace(list)</div>
<div class="syntax">list.replace(node)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="replace_text" class=""><a name="replace_text"><var>text</var></a></dt>
<dd class="">a text for the text nodes that replace the list elements</dd>
<dt id="replace_factoryFunction" class=""><a name="replace_factoryFunction"><var>factoryFunction</var></a></dt>
<dd class="">a <code>function(listItem, listIndex)</code> that will be invoked for each list element to determine its content:
<dl><dt>listItem</dt><dd>The list element that will receive the new children.</dd>
<dt>listIndex</dt><dd>The index of the list element that will receive the new children.</dd>
<dt class="returnValue">(callback return value)<dt><dd>The node(s) to be added to the list element.
Can be either a string for a text node, an HTML element or a list containing strings, lists, functions and/or DOM nodes.
If a function is returned or in the list, it will be invoked recursively with the same arguments.</dd></dl></dd>
<dt id="replace_node" class=""><a name="replace_node"><var>node</var></a></dt>
<dd class="">content to replace <strong>only to the first element</strong> of the list with. The content can be a string for a text node,
an HTML node or a list containing strings and/or HTML node.</dd>
<dt id="replace_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2 inSyntax3"><a name="replace_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2 inSyntax3">the current list</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Replaces the list items with the the given node(s) in the DOM tree.
If a string has been given, it will be set as text node.
DOM nodes will be added directly. If you pass a list, all its elements will be added using the rules above.</p><p>When you pass a DOM node and the target list has more than one element, the original node will be added to the first list element,
and <a href='clone.html'>clones for all following list elements.</p><p>You can also pass a function as argument. It will be invoked for each list element to create the node to add.  The
function can return all values allowed by <var>add()</var>, including another function to be called.</p><p></a>EE(), <code><a href='html.html'>HTML()</a></code> and <code><a href='clone.html'>clone()</a></code> are compatible with <var>add()</var> and can help you create new HTML ndoes.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Using the following HTML:
<pre>
&lt;div id="comments">
   &lt;div id="commentOne">My old comment.&lt;/div>
&lt;/div>
</pre>
This replaces the div 'commentOne':
<pre>
$('#commentOne').replace('Some new comment.');
</pre>
The resulting HTML is:
<pre>
&lt;div id="comments">
   Some new comment.
&lt;/div>
</pre>
Please note that not only the text has changed, but the whole &lt;div> has been replaced. If you only want to replace the element's text content
you should use <code><a href='fill.html'>fill()</a></code> instead of <var>replace()</var>.
</p></div>
<h4>Example</h4>
<div class="example"><p>Using the following HTML:
<pre>
&lt;ul id="myList">
  &lt;li>First list entry&lt;/li>
  &lt;li>Second list entry&lt;/li>
&lt;/ul>
</pre>
The following example will replace <strong>only the first &lt;li> element</strong>:
<pre>
$('#myList li').sub(0, 1).replace(EE('li', 'My extra point'));
</pre>
This results in
<pre>
&lt;ul id="myList">
  &lt;li>My extra point&lt;/li>
  &lt;li>Second list entry&lt;/li>
&lt;/ul>
</pre></p><p></p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="dial.html">.dial()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="length.html">.length</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promiseClass.html">Promise</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
