{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `_.parseDate() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-parsedate">_.parseDate()</a></h2>
<div class="summary">
Parses the given string as Date using the given format.</div>

<div class="availability">Util module only.</div><h4>Syntax</h4>
<div class="syntaxVariant">
<div class="syntax">_.parseDate(format, dateString)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="parsedate_format" class=""><a name="parsedate_format"><var>format</var></a></dt>
<dd class="">the format that describes the output</dd>
<dt id="parsedate_dateString" class=""><a name="parsedate_dateString"><var>dateString</var></a></dt>
<dd class="">the string-formatted date to parse</dd>
<dt id="parsedate_RETURN" class="returnValue inSyntax0"><a name="parsedate_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0">the Date; <span class="var">undefined</span> if parsing failed; or <span class="var">null</span> if the string was empty and
the date format is flagged as optional ('?' at the beginning)</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>
Parses the given string as Date using the given format. The format specifies which date component is expected where in the string.
It can also be used to specify the timezone of the input string, and it may specify whether an empty string (including strings containing
only whitespace) is allowed.</p><p>In the date format there are a number of reserved characters that are used as placeholders of date components. If you put a single
character in the format, this will match numbers of any length. If you have two or more of the same character, this is recognized as
fixed-length string.<br/>
Some placeholders, such as month names, support translations. To parse dates in other languages, you can specify a comma-separated
list of translations in brackets following the placeholder.<br/>
The following placeholder characters are supported.
<table>
<tr><th>Character</th><th>Description</th></tr>
<tr><td>y</td><td>Year (4 digits)</td></tr>
<tr><td>Y</td><td>Year (2 digits, 2000-based)</td></tr>
<tr><td>M</td><td>Month (1-12)</td></tr>
<tr><td>n/td><td>Month as short name ('Jan', 'Feb'...). Supports translations.</td></tr>
<tr><td>N</td><td>Month as long name ('January', 'February'...). Supports translations.</td></tr>
<tr><td>d</td><td>Day of month (1-31)</td></tr>
<tr><td>m</td><td>Minutes (0-59)</td></tr>
<tr><td>H</td><td>Hours in 24h format (0-23)</td></tr>
<tr><td>h</td><td>Hours in 12h format (1-12)</td></tr>
<tr><td>K</td><td>Hours in 0-based 12h format (0-11)</td></tr>
<tr><td>k</td><td>Hours in 1-based 24h format (1-24)</td></tr>
<tr><td>s</td><td>Seconds (0-59)</td></tr>
<tr><td>S</td><td>Milliseconds (0-999)</td></tr>
<tr><td>a</td><td>Either 'am' or 'pm'. Supports translations.</td></tr>
<tr><td>w</td><td>Day of week as short name ('Sun', 'Mon'...). Supports translations.</td></tr>
<tr><td>W</td><td>Day of week as long name ('Sunday', 'Monday'...). Supports translations.</td></tr>
<tr><td>z</td><td>Timezone offset, e.g. '+0700'</td></tr>
</table>
If you prefix the input string with a question mark ('?'), this means that the date is optional. If the input string is empty or consists
solely of whitespace, <span class="var">parseDate</span> will return null.<br/>
<span class="var">parseDate()</span> also supports parsing a date in a different timezone. You only need to put the timezone in brackets at the front of
the format, e.g. '[+0100]'.<br/></p><p>All other characters  are expected to be identical in format and input string, with the exception of whitespace. Each whitespace character
in the format can match any number of other whitespace characters in the input string, but at least one.</p><p>Any components that are not in the format will be set to 0. For example, if your format has only date, month and day, the resulting
date will be at midnight.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Parsing dates in various formats.
<pre>
var v1  = _.parseDate('y-M-d', '2013-7-9');
var v2  = _.parseDate('?yyyyMMdd', '20130709');
var v3  = _.parseDate('?yyyyMMdd', ' ');  // returns null
var v4  = _.parseDate('yyyy-MM-ddTHH:mm:ss.SS z', '2013-07-09T23:07:38.472 +0700');
var v5  = _.parseDate('MM/dd/YY h:mm:ss a', '07/09/13 11:07:38 pm');
var v6  = _.parseDate('dd.MM.yyyy HH:mm:ss', '09.07.2013 23:07:38');
var v7  = _.parseDate('W, N d y', 'Tuesday, July 9 2013');
var v8  = _.parseDate('d.N[Januar,Februar,Maerz,April,Mai,Juni,Juli,'+
            'August,September,Oktober,November,Dezember] y', '9. Juli 2013'); // parsing german
var v9  = _.parseDate('[+0100]yyyy-MM-dd h:mm a', '2013-07-09 5:07 pm');  // different timezone:
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a> <span class="tocMod">Web</span>
</li><li><a href="length.html">list.length</a> <span class="tocMod">Web, Util</span>
</li><li><a href="dollardollar.html">$$()</a> <span class="tocMod">Web</span>
</li><li><a href="defer.html">$.defer()</a> 
</li><li><a href="delay.html">$.delay()</a> 
</li><li><a href="getcookie.html">$.getCookie()</a> <span class="tocMod">Web</span>
</li><li><a href="loop.html">$.loop()</a> <span class="tocMod">Web</span>
</li><li><a href="off.html">$.off()</a> <span class="tocMod">Web</span>
</li><li><a href="parsejson.html">$.parseJSON()</a> <span class="tocMod">Web</span>
</li><li><a href="ready.html">$.ready()</a> <span class="tocMod">Web</span>
</li><li><a href="request.html">$.request()</a> <span class="tocMod">Web</span>
</li><li><a href="setcookie.html">$.setCookie()</a> <span class="tocMod">Web</span>
</li><li><a href="tojson.html">$.toJSON()</a> <span class="tocMod">Web</span>
</li><li><a href="wait.html">$.wait()</a> 
</li><li><a href="add.html">.add()</a> <span class="tocMod">Web</span>
</li><li><a href="addafter.html">.addAfter()</a> <span class="tocMod">Web</span>
</li><li><a href="addbefore.html">.addBefore()</a> <span class="tocMod">Web</span>
</li><li><a href="addfront.html">.addFront()</a> <span class="tocMod">Web</span>
</li><li><a href="animate.html">.animate()</a> <span class="tocMod">Web</span>
</li><li><a href="array.html">.array()</a> <span class="tocMod">Util</span>
</li><li><a href="call.html">.call()</a> <span class="tocMod">Util</span>
</li><li><a href="clone.html">.clone()</a> <span class="tocMod">Web</span>
</li><li><a href="collect.html">.collect()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="contains.html">.contains()</a> <span class="tocMod">Util</span>
</li><li><a href="dial.html">.dial()</a> <span class="tocMod">Web</span>
</li><li><a href="each.html">.each()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="endswith.html">.endsWith()</a> <span class="tocMod">Util</span>
</li><li><a href="equals.html">.equals()</a> <span class="tocMod">Util</span>
</li><li><a href="fill.html">.fill()</a> <span class="tocMod">Web</span>
</li><li><a href="filter.html">.filter()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="find.html">.find()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="findlast.html">.findLast()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="get.html">.get()</a> <span class="tocMod">Web</span>
</li><li><a href="ht.html">.ht()</a> <span class="tocMod">Web</span>
</li><li><a href="intersection.html">.intersection()</a> <span class="tocMod">Util</span>
</li><li><a href="is.html">.is()</a> <span class="tocMod">Web</span>
</li><li><a href="join.html">.join()</a> <span class="tocMod">Util</span>
</li><li><a href="keys.html">.keys()</a> <span class="tocMod">Util</span>
</li><li><a href="map.html">.map()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="offset.html">.offset()</a> 
</li><li><a href="on.html">.on()</a> <span class="tocMod">Web</span>
</li><li><a href="onover.html">.onOver()</a> <span class="tocMod">Web</span>
</li><li><a href="only.html">.only()</a> <span class="tocMod"></span>
</li><li><a href="remove.html">.remove()</a> <span class="tocMod">Web</span>
</li><li><a href="replace.html">.replace()</a> <span class="tocMod">Web</span>
</li><li><a href="reverse.html">.reverse()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="select.html">.select()</a> <span class="tocMod">Web</span>
</li><li><a href="set.html">.set()</a> <span class="tocMod">Web</span>
</li><li><a href="sort.html">.sort()</a> <span class="tocMod">Util</span>
</li><li><a href="startswith.html">.startsWith()</a> <span class="tocMod">Util</span>
</li><li><a href="sub.html">.sub()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="text.html">.text()</a> <span class="tocMod">Web</span>
</li><li><a href="toobject.html">.toObject()</a> <span class="tocMod">Util</span>
</li><li><a href="toggle.html">.toggle()</a> <span class="tocMod">Web</span>
</li><li><a href="trav.html">.trav()</a> <span class="tocMod">Web</span>
</li><li><a href="trigger.html">.trigger()</a> <span class="tocMod">Web</span>
</li><li><a href="uniq.html">.uniq()</a> <span class="tocMod">Util</span>
</li><li><a href="unite.html">.unite()</a> <span class="tocMod">Util</span>
</li><li><a href="values.html">.values()</a> <span class="tocMod"></span>
</li><li><a href="ee.html">EE()</a> <span class="tocMod">Web</span>
</li><li><a href="html.html">HTML()</a> <span class="tocMod">Web</span>
</li><li><a href="M.html">M</a> <span class="tocMod">Web, Util</span>
</li><li><a href="list.html">Minified Lists</a> <span class="tocMod">Web, Util</span>
</li><li><a href="promiseClass.html">Promise</a> <span class="tocMod">Web, Util</span>
</li><li><a href="underscore.html">_()</a> <span class="tocMod">Util</span>
</li><li><a href="bind.html">_.bind()</a> <span class="tocMod">Util</span>
</li><li><a href="copyobj.html">_.copyObj()</a> <span class="tocMod">Util</span>
</li><li><a href="dateadd.html">_.dateAdd()</a> <span class="tocMod">Util</span>
</li><li><a href="dateclone.html">_.dateClone()</a> <span class="tocMod">Util</span>
</li><li><a href="datediff.html">_.dateDiff()</a> <span class="tocMod">Util</span>
</li><li><a href="datemidnight.html">_.dateMidnight()</a> <span class="tocMod">Util</span>
</li><li><a href="eachobj.html">_.eachObj()</a> <span class="tocMod">Util</span>
</li><li><a href="escapehtml.html">_.escapeHtml()</a> <span class="tocMod">Util</span>
</li><li><a href="escaperegexp.html">_.escapeRegExp()</a> <span class="tocMod">Util</span>
</li><li><a href="filterobj.html">_.filterObj()</a> <span class="tocMod">Util</span>
</li><li><a href="format.html">_.format()</a> <span class="tocMod">Util</span>
</li><li><a href="formathtml.html">_.formatHtml()</a> <span class="tocMod">Util</span>
</li><li><a href="formatvalue.html">_.formatValue()</a> <span class="tocMod">Util</span>
</li><li><a href="isbool.html">_.isBool()</a> <span class="tocMod">Util</span>
</li><li><a href="isdate.html">_.isDate()</a> <span class="tocMod">Util</span>
</li><li><a href="isfunction.html">_.isFunction()</a> <span class="tocMod">Util</span>
</li><li><a href="islist.html">_.isList()</a> <span class="tocMod">Util</span>
</li><li><a href="isnumber.html">_.isNumber()</a> <span class="tocMod">Util</span>
</li><li><a href="isobject.html">_.isObject()</a> <span class="tocMod">Util</span>
</li><li><a href="isstring.html">_.isString()</a> <span class="tocMod">Util</span>
</li><li><a href="isvalue.html">_.isValue()</a> <span class="tocMod">Util</span>
</li><li><a href="mapobj.html">_.mapObj()</a> <span class="tocMod">Util</span>
</li><li><a href="pad.html">_.pad()</a> <span class="tocMod">Util</span>
</li><li><a href="parsedate.html">_.parseDate()</a> <span class="tocMod">Util</span>
</li><li><a href="parsenumber.html">_.parseNumber()</a> <span class="tocMod">Util</span>
</li><li><a href="partial.html">_.partial()</a> <span class="tocMod">Util</span>
</li><li><a href="range.html">_.range()</a> <span class="tocMod"></span>
</li><li><a href="template.html">_.template()</a> <span class="tocMod">Util</span>
</li><li><a href="tostring.html">_.toString()</a> <span class="tocMod">Util</span>
</li><li><a href="trim.html">_.trim()</a> <span class="tocMod">Util</span>
</li><li><a href="objvalues.html">_.values()</a> <span class="tocMod">Util</span>
</li><li><a href="promise.html">promise()</a> 
</li><li><a href="always.html">promise.always()</a> 
</li><li><a href="error.html">promise.error()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="state.html">promise.state</a> <span class="tocMod">Web, Util</span>
</li><li><a href="then.html">promise.then()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="require.html">require()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
