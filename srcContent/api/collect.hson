{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `.collect() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-collect">.collect()</a></h2>
<div class="summary">Creates a new Minified list from the current list using the given callback function.</div>

<h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">list.collect(collectFunc)</div>
<div class="syntax">_.collect(list, collectFunc)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="collect_list" class=""><a name="collect_list"><var>list</var></a></dt>
<dd class="">a list to transform. Can be an array, a <a href='list.html'>Minified list</a> or any other array-like structure with
<span class="var">length</span> property.</dd>
<dt id="collect_collectFunc" class=""><a name="collect_collectFunc"><var>collectFunc</var></a></dt>
<dd class="">The callback <code>function(item, index)</code> to invoke for each item:
<dl><dt>item</dt><dd>The current list element.</dd><dt>index</dt><dd>The second the zero-based index of the current element.</dd>
<dt class="returnValue">(callback return value)</dt><dd>If the callback returns a list, its elements will be added to
the result list. Other objects will also be added. Nulls and <span class="var">undefined</span> will be ignored and be not added to
the new result list. </dd></dl></dd>
<dt id="collect_RETURN" class="returnValue inSyntax0 inSyntax1"><a name="collect_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1">the new <a href='list.html'>list</a></dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Creates a new <a href='list.html'>Minified list</a> from the current list using the given callback function.
The callback is invoked once for each element of the current list. The callback results will be added to the result list.
The callback can return
<ul>
<li>an array or another list-like object. Its content will be appended to the resulting list.</li>
<li>a regular object which will be appended to the list</li>
<li><span class="var">null</span> (or <span class="var">undefined</span>), which means that no object will be added to the list.
If you need to add <span class="var">null</span> or <span class="var">undefined</span> to the result list, put it into a single-element array.</li>
</ul></p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Goes through a list of numbers. Numbers over 10 will be removed. Numbers 5 and below stay. Numbers between 6 and
10 will be replaced by two numbers whose sum is the original value.
<pre>
var texts = _(3, 7, 11, 5, 19, 3).collect(function(number, index) {
    if (number > 10)
        return null;           // remove numbers >10
    else if (number > 5)
        return [5, number-5];  // replace with two entries
    else
        return number;         // keep lower numbers
});
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Goes through input elements on a web page. If they are text inputs, their value will be added to the list:
<pre>
var texts = $('input').collect(function(input) {
    if (input.getAttribute('type') != null || input.getAttribute('type') == 'text')
        return input.value;
    else
        return null; // ignore
});
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Creates a list of all children of the selected list.
<pre>
var childList = $('.mySections').collect(function(node) {
    return node.childNodes; // adds a while list of nodes
});
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Goes through selected input elements. For each hit, the innerHTML is added twice, once in lower case and once in upper case:
<pre>
var elements = $('input.myTexts').collect(function(item) {
    return [item.innerHTML.toLowerCase(), item.innerHTML.toUpperCase()];
});
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="length.html">list.length</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="defer.html">$.defer()</a>
</li><li><a href="delay.html">$.delay()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="wait.html">$.wait()</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="array.html">.array()</a>
</li><li><a href="call.html">.call()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="contains.html">.contains()</a>
</li><li><a href="dial.html">.dial()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="endswith.html">.endsWith()</a>
</li><li><a href="equals.html">.equals()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="findlast.html">.findLast()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="ht.html">.ht()</a>
</li><li><a href="intersection.html">.intersection()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="join.html">.join()</a>
</li><li><a href="keys.html">.keys()</a>
</li><li><a href="map.html">.map()</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="reverse.html">.reverse()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sort.html">.sort()</a>
</li><li><a href="startswith.html">.startsWith()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toobject.html">.toObject()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="uniq.html">.uniq()</a>
</li><li><a href="unite.html">.unite()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="html.html">HTML()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promiseClass.html">Promise</a>
</li><li><a href="underscore.html">_()</a>
</li><li><a href="array.html">_.array()</a>
</li><li><a href="bind.html">_.bind()</a>
</li><li><a href="call.html">_.call()</a>
</li><li><a href="collect.html">_.collect</a>
</li><li><a href="contains.html">_.contains()</a>
</li><li><a href="copyobj.html">_.copyObj()</a>
</li><li><a href="dateadd.html">_.dateAdd()</a>
</li><li><a href="dateclone.html">_.dateClone()</a>
</li><li><a href="datediff.html">_.dateDiff()</a>
</li><li><a href="datemidnight.html">_.dateMidnight()</a>
</li><li><a href="each.html">_.each()</a>
</li><li><a href="eachobj.html">_.eachObj()</a>
</li><li><a href="endswith.html">_.endsWith()</a>
</li><li><a href="equals.html">_.equals()</a>
</li><li><a href="escapehtml.html">_.escapeHtml()</a>
</li><li><a href="escaperegexp.html">_.escapeRegExp()</a>
</li><li><a href="filter.html">_.filter()</a>
</li><li><a href="filterobj.html">_.filterObj()</a>
</li><li><a href="find.html">_.find()</a>
</li><li><a href="findlast.html">_.findLast()</a>
</li><li><a href="formathtml.html">_.format()</a>
</li><li><a href="format.html">_.format()</a>
</li><li><a href="formatvalue.html">_.formatValue()</a>
</li><li><a href="intersection.html">_.intersection()</a>
</li><li><a href="isbool.html">_.isBool()</a>
</li><li><a href="isdate.html">_.isDate()</a>
</li><li><a href="isfunction.html">_.isFunction()</a>
</li><li><a href="islist.html">_.isList()</a>
</li><li><a href="isnumber.html">_.isNumber()</a>
</li><li><a href="isobject.html">_.isObject()</a>
</li><li><a href="isstring.html">_.isString()</a>
</li><li><a href="isvalue.html">_.isValue()</a>
</li><li><a href="map.html">_.map()</a>
</li><li><a href="mapobj.html">_.mapObj()</a>
</li><li><a href="pad.html">_.pad()</a>
</li><li><a href="parsedate.html">_.parseDate()</a>
</li><li><a href="parsenumber.html">_.parseNumber()</a>
</li><li><a href="partial.html">_.partial()</a>
</li><li><a href="range.html">_.range()</a>
</li><li><a href="reverse.html">_.reverse()</a>
</li><li><a href="startswith.html">_.startsWith()</a>
</li><li><a href="sub.html">_.sub()</a>
</li><li><a href="template.html">_.template()</a>
</li><li><a href="toobject.html">_.toObject()</a>
</li><li><a href="tostring.html">_.toString()</a>
</li><li><a href="trim.html">_.trim()</a>
</li><li><a href="uniq.html">_.uniq()</a>
</li><li><a href="unite.html">_.unite()</a>
</li><li><a href="promise.html">promise()</a>
</li><li><a href="always.html">promise.always()</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="state.html">promise.state</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
