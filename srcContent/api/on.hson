{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `.on() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-on">.on()</a></h2>
<div class="summary">Registers the function as event handler for all items in the list.</div>

<div class="availability">Web module only.</div><h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">list.on(names, eventHandler)</div>
<div class="syntax">list.on(names, selector, eventHandler)</div>
<div class="syntax">list.on(names, customFunc, args)</div>
<div class="syntax">list.on(names, customFunc, fThis, args)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="on_names" class=""><a name="on_names"><var>names</var></a></dt>
<dd class="">the space-separated names of the events to register for, e.g. 'click'. Case-sensitive. The 'on' prefix in front of
the name must not used. You can register the handler for more than one event by specifying several
space-separated event names. If the name is prefixed
with '|' (pipe), the event will be passed through and the event's default actions will be executed by the browser.
If the name is prefixed with '?', the event will only be passed through if the handler returns <span class="var">true</span>.</dd>
<dt id="on_selector" class=""><a name="on_selector"><var>selector (optional)</var></a></dt>
<dd class="">a selector string for <a href='dollar.html'>$() to receive only events that match the selector.
Supports all valid parameters for </a>dollar#$() except functions. Analog to <code><a href='is.html'>is()</a></code>,
the selector is optimized for the simple patterns '.classname', 'tagname' and 'tagname.classname'.</dd>
<dt id="on_eventHandler" class=""><a name="on_eventHandler"><var>eventHandler</var></a></dt>
<dd class="">the callback <code>function(event, index, selectedIndex)</code> to invoke when the event has been triggered:
<dl>
<dt>event</dt><dd>The original DOM event object.</dd>
<dt>index</dt><dd>The index of the target object in the <a href='list.html'>Minified list</a> .</dd>
<dt class="returnValue">(callback return value)</dt><dd>Unless the handler returns <span class="var">true</span>
or the event name is prefixed by '|', all further processing of the event will be
stopped and event bubbling will be disabled.</dd>
</dl>
'this' is set to the target element that caused the event (the same as <span class="var">event.target</span>).
If the event name has been prefixed with '?', the return value will be evaluated to find out whether to
cancel further event processing. In all other cases, the return value will be ignored.</dd>
<dt id="on_customFunc" class=""><a name="on_customFunc"><var>customFunc</var></a></dt>
<dd class="">a function to be called instead of a regular event handler with the arguments given in <span class="var">args</span>
and optionally the 'this' context given using <span class="var">fThis</span>.</dd>
<dt id="on_fThis" class=""><a name="on_fThis"><var>fThis (optional)</var></a></dt>
<dd class="">a value for 'this' in the custom callback, instead of the event target</dd>
<dt id="on_args" class=""><a name="on_args"><var>args (optional)</var></a></dt>
<dd class="">an array of arguments to pass to the custom callback function instead of the event objects.</dd>
<dt id="on_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2 inSyntax3"><a name="on_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2 inSyntax3">the list</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Registers the function as event handler for all items in the list.</p><p>By default, Minified cancels event propagation and disables element's default behaviour for all elements that have an event handler.
You can override this, either by prefixing the event name with a '|', or by prefixing them with '?' and returning a <span class="var">true</span>
in the handler. Both will reinstate the original JavaScript behaviour.</p><p>Handlers are called with the original event object as first argument, the index of the source element in the
list as second argument and 'this' set to the source element of the event (e.g. the button that has been clicked).</p><p>Instead of the event objects, you can also pass an array of arguments and a new value for 'this' to the callback.</p><p>Optionally you can specify a selector string to receive only events that bubbled up from elements matching the
selector. The selector is executed in the context of the element you registered on to identify whether the
original target of the event qualifies. If not, the handler is not called.</p><p>Minified always registers event handlers with event bubbling enabled. Event capture is not supported.</p><p>Event handlers can be unregistered using <code><a href='off.html'>$.off()</a></code>.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Adds a handler to all divs which paints the div background color to red when clicked.
<pre>
$('div').on('click', function() {
   this.style.backgroundColor = 'red';    // 'this' contains the element that caused the event
});
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Registers a handler to call a method setStatus('running') using an inline function:
<pre>
$('#myButton').on('click', function() {
   myObject.setStatus('running');
});
</pre>
The previous example can bere written like this, using <span class="var">on()</span>'s <span class="var">args</span> and <span class="var">fThis</span> parameters:
<pre>
$('#myButton').on('click', myObject.setStatus, myObject, ['running']);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Adds two handlers on an input field. The event names are prefixed with '|' and thus keep their original behaviour:
<pre>
$('#myInput').on('|keypress |keydown', function() {
   // do something
});
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Adds a click handler that will abort the operation by returning false, unless the user confirms it:
<pre>
$('#myLink').on('?click', function() {
   return window.confirm('Really leave?');
});
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Adds listeners for all clicks on a table's rows.
<pre>
$('#table').on('change', 'tr', function(event, index, selectedIndex) {
   alert("Click on table row number: " + selectedIndex);
});
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a> <span class="tocMod">Web</span>
</li><li><a href="length.html">list.length</a> <span class="tocMod">Web, Util</span>
</li><li><a href="dollardollar.html">$$()</a> <span class="tocMod">Web</span>
</li><li><a href="defer.html">$.defer()</a> 
</li><li><a href="delay.html">$.delay()</a> 
</li><li><a href="getcookie.html">$.getCookie()</a> 
</li><li><a href="loop.html">$.loop()</a> <span class="tocMod">Web</span>
</li><li><a href="off.html">$.off()</a> <span class="tocMod">Web</span>
</li><li><a href="parsejson.html">$.parseJSON()</a> <span class="tocMod">Web</span>
</li><li><a href="ready.html">$.ready()</a> <span class="tocMod">Web</span>
</li><li><a href="request.html">$.request()</a> <span class="tocMod">Web</span>
</li><li><a href="setcookie.html">$.setCookie()</a> 
</li><li><a href="tojson.html">$.toJSON()</a> <span class="tocMod">Web</span>
</li><li><a href="wait.html">$.wait()</a> 
</li><li><a href="add.html">.add()</a> <span class="tocMod">Web</span>
</li><li><a href="addafter.html">.addAfter()</a> <span class="tocMod">Web</span>
</li><li><a href="addbefore.html">.addBefore()</a> <span class="tocMod">Web</span>
</li><li><a href="addfront.html">.addFront()</a> <span class="tocMod">Web</span>
</li><li><a href="animate.html">.animate()</a> <span class="tocMod">Web</span>
</li><li><a href="array.html">.array()</a> <span class="tocMod">Util</span>
</li><li><a href="call.html">.call()</a> <span class="tocMod">Util</span>
</li><li><a href="clone.html">.clone()</a> <span class="tocMod">Web</span>
</li><li><a href="collect.html">.collect()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="contains.html">.contains()</a> <span class="tocMod">Util</span>
</li><li><a href="dial.html">.dial()</a> <span class="tocMod">Web</span>
</li><li><a href="each.html">.each()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="endswith.html">.endsWith()</a> <span class="tocMod">Util</span>
</li><li><a href="equals.html">.equals()</a> <span class="tocMod">Util</span>
</li><li><a href="fill.html">.fill()</a> <span class="tocMod">Web</span>
</li><li><a href="filter.html">.filter()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="find.html">.find()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="findlast.html">.findLast()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="get.html">.get()</a> <span class="tocMod">Web</span>
</li><li><a href="ht.html">.ht()</a> <span class="tocMod">Web</span>
</li><li><a href="intersection.html">.intersection()</a> <span class="tocMod">Util</span>
</li><li><a href="is.html">.is()</a> <span class="tocMod">Web</span>
</li><li><a href="join.html">.join()</a> <span class="tocMod">Util</span>
</li><li><a href="keys.html">.keys()</a> <span class="tocMod">Util</span>
</li><li><a href="map.html">.map()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="offset.html">.offset()</a> 
</li><li><a href="on.html">.on()</a> <span class="tocMod">Web</span>
</li><li><a href="onchange.html">.onOver()</a> <span class="tocMod">Web</span>
</li><li><a href="onover.html">.onOver()</a> <span class="tocMod">Web</span>
</li><li><a href="only.html">.only()</a> <span class="tocMod"></span>
</li><li><a href="remove.html">.remove()</a> <span class="tocMod">Web</span>
</li><li><a href="replace.html">.replace()</a> <span class="tocMod">Web</span>
</li><li><a href="reverse.html">.reverse()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="select.html">.select()</a> <span class="tocMod">Web</span>
</li><li><a href="set.html">.set()</a> <span class="tocMod">Web</span>
</li><li><a href="sort.html">.sort()</a> <span class="tocMod">Util</span>
</li><li><a href="startswith.html">.startsWith()</a> <span class="tocMod">Util</span>
</li><li><a href="sub.html">.sub()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="text.html">.text()</a> <span class="tocMod">Web</span>
</li><li><a href="toobject.html">.toObject()</a> <span class="tocMod">Util</span>
</li><li><a href="toggle.html">.toggle()</a> <span class="tocMod">Web</span>
</li><li><a href="trav.html">.trav()</a> <span class="tocMod">Web</span>
</li><li><a href="trigger.html">.trigger()</a> <span class="tocMod">Web</span>
</li><li><a href="uniq.html">.uniq()</a> <span class="tocMod">Util</span>
</li><li><a href="unite.html">.unite()</a> <span class="tocMod">Util</span>
</li><li><a href="values.html">.values()</a> <span class="tocMod"></span>
</li><li><a href="ee.html">EE()</a> <span class="tocMod">Web</span>
</li><li><a href="html.html">HTML()</a> <span class="tocMod">Web</span>
</li><li><a href="M.html">M</a> <span class="tocMod">Web, Util</span>
</li><li><a href="list.html">Minified Lists</a> <span class="tocMod">Web, Util</span>
</li><li><a href="promiseClass.html">Promise</a> <span class="tocMod">Web, Util</span>
</li><li><a href="underscore.html">_()</a> <span class="tocMod">Util</span>
</li><li><a href="bind.html">_.bind()</a> <span class="tocMod">Util</span>
</li><li><a href="copyobj.html">_.copyObj()</a> <span class="tocMod">Util</span>
</li><li><a href="dateadd.html">_.dateAdd()</a> <span class="tocMod">Util</span>
</li><li><a href="dateclone.html">_.dateClone()</a> <span class="tocMod">Util</span>
</li><li><a href="datediff.html">_.dateDiff()</a> <span class="tocMod">Util</span>
</li><li><a href="datemidnight.html">_.dateMidnight()</a> <span class="tocMod">Util</span>
</li><li><a href="eachobj.html">_.eachObj()</a> <span class="tocMod">Util</span>
</li><li><a href="escapehtml.html">_.escapeHtml()</a> <span class="tocMod">Util</span>
</li><li><a href="escaperegexp.html">_.escapeRegExp()</a> <span class="tocMod">Util</span>
</li><li><a href="filterobj.html">_.filterObj()</a> <span class="tocMod">Util</span>
</li><li><a href="format.html">_.format()</a> <span class="tocMod">Util</span>
</li><li><a href="formathtml.html">_.formatHtml()</a> <span class="tocMod">Util</span>
</li><li><a href="formatvalue.html">_.formatValue()</a> <span class="tocMod">Util</span>
</li><li><a href="isbool.html">_.isBool()</a> <span class="tocMod">Util</span>
</li><li><a href="isdate.html">_.isDate()</a> <span class="tocMod">Util</span>
</li><li><a href="isfunction.html">_.isFunction()</a> <span class="tocMod">Util</span>
</li><li><a href="islist.html">_.isList()</a> <span class="tocMod">Util</span>
</li><li><a href="isnumber.html">_.isNumber()</a> <span class="tocMod">Util</span>
</li><li><a href="isobject.html">_.isObject()</a> <span class="tocMod">Util</span>
</li><li><a href="isstring.html">_.isString()</a> <span class="tocMod">Util</span>
</li><li><a href="isvalue.html">_.isValue()</a> <span class="tocMod">Util</span>
</li><li><a href="mapobj.html">_.mapObj()</a> <span class="tocMod">Util</span>
</li><li><a href="pad.html">_.pad()</a> <span class="tocMod">Util</span>
</li><li><a href="parsedate.html">_.parseDate()</a> <span class="tocMod">Util</span>
</li><li><a href="parsenumber.html">_.parseNumber()</a> <span class="tocMod">Util</span>
</li><li><a href="partial.html">_.partial()</a> <span class="tocMod">Util</span>
</li><li><a href="range.html">_.range()</a> <span class="tocMod"></span>
</li><li><a href="template.html">_.template()</a> <span class="tocMod">Util</span>
</li><li><a href="tostring.html">_.toString()</a> <span class="tocMod">Util</span>
</li><li><a href="trim.html">_.trim()</a> <span class="tocMod">Util</span>
</li><li><a href="objvalues.html">_.values()</a> <span class="tocMod">Util</span>
</li><li><a href="promise.html">promise()</a> 
</li><li><a href="always.html">promise.always()</a> 
</li><li><a href="error.html">promise.error()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="state.html">promise.state</a> <span class="tocMod">Web, Util</span>
</li><li><a href="then.html">promise.then()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="require.html">require()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
