{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `.addFront() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-addfront">.addFront()</a></h2>
<div class="summary">Adds the given node(s) as children to the list's HTML elements.</div>

<h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">list.addFront(text)</div>
<div class="syntax">list.addFront(factoryFunction)</div>
<div class="syntax">list.addFront(list)</div>
<div class="syntax">list.addFront(node)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="addfront_text" class=""><a name="addfront_text"><var>text</var></a></dt>
<dd class="">a string to add as text node of the list elements</dd>
<dt id="addfront_factoryFunction" class=""><a name="addfront_factoryFunction"><var>factoryFunction</var></a></dt>
<dd class="">a <code>function(listItem, listIndex)</code> that will be invoked for each list element to create the nodes:
<dl><dt>listItem</dt><dd>The list element that will receive the new children.</dd>
<dt>listIndex</dt><dd>The index of the list element that will receive the new children.</dd>
<dt class="returnValue">(callback return value)<dt><dd>The node(s) to be added to the list element.
Can be either a string for a text node, an HTML element or a list containing strings, lists, functions and/or DOM nodes.
If a function is returned or in the list, it will be invoked recursively with the same arguments.</dd></dl>
</dd>
<dt id="addfront_list" class=""><a name="addfront_list"><var>list</var></a></dt>
<dd class="">a list containing text, functions, nodes or nested lists containing those items. Please note that if you have DOM nodes in this list
and attempt to add them to more than one element, the result is undefined.</dd>
<dt id="addfront_node" class=""><a name="addfront_node"><var>node</var></a></dt>
<dd class="">a DOM node to add <strong>only to the first element</strong> of the list.</dd>
<dt id="addfront_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2 inSyntax3"><a name="addfront_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2 inSyntax3">the current list</dd>
</dl>

<h4>Description</h4>
<div class="description"><p>Adds the given node(s) as children to the list's HTML elements. Unlike <code><a href='add.html'>add()</a></code>, the new nodes will be the first children and not the last.
If a string has been given, it will be added as text node.
DOM nodes will be added directly. If you pass a list, all its elements will be added using the rules above.</p><p>When you pass a DOM node and the target list has more than one element, the original node will be added to the first list element,
and <a href='clone.html'>clones for all following list elements.</p><p>You can also pass a function as argument. It will be invoked for each list element to create the node to add.  The
function can return all values allowed by <var>add()</var>, including another function to be called.</p><p></a>EE(), <code><a href='html.html'>HTML()</a></code> and <code><a href='clone.html'>clone()</a></code> are compatible with <var>add()</var> and can help you create new HTML ndoes.</p><p></p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Using the following HTML:
<pre>
&lt;div id="comments">Here is some text.&lt;br/>&lt;/div>
</pre>
Add a text to the given 'comment' div:
<pre>
$('#comments').addFront('Some additional text. ');
</pre>
This results in:
<pre>
&lt;div id="comments">Some additional text. Here is some text.&lt;br/>&lt;/div>
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Using the following HTML:
<pre>
&lt;ul id="myList">
  &lt;li>First list entry&lt;/li>
  &lt;li>Second list entry&lt;/li>
&lt;/ul>
</pre>
The following Javascript adds an element to the list:
<pre>
$('#myList').addFront(EE('li', 'My extra point'));
</pre>
This results in
<pre>
&lt;ul id="myList">
  &lt;li>My extra point&lt;/li>
  &lt;li>First list entry&lt;/li>
  &lt;li>Second list entry&lt;/li>
&lt;/ul>
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Use a list to add several elements at once:
<pre>
$('#comments').addFront([
     EE('br'),
     'Some text',
     EE('span', {'className': 'highlight'}, 'Some highlighted text')
]);
</pre>
</p></div>
</div>


<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html">$()</a>
</li><li><a href="length.html">list.length</a>
</li><li><a href="dollardollar.html">$$()</a>
</li><li><a href="defer.html">$.defer()</a>
</li><li><a href="delay.html">$.delay()</a>
</li><li><a href="getcookie.html">$.getCookie()</a>
</li><li><a href="loop.html">$.loop()</a>
</li><li><a href="off.html">$.off()</a>
</li><li><a href="parsejson.html">$.parseJSON()</a>
</li><li><a href="ready.html">$.ready()</a>
</li><li><a href="request.html">$.request()</a>
</li><li><a href="setcookie.html">$.setCookie()</a>
</li><li><a href="tojson.html">$.toJSON()</a>
</li><li><a href="wait.html">$.wait()</a>
</li><li><a href="listunderscore.html">._</a>
</li><li><a href="add.html">.add()</a>
</li><li><a href="addafter.html">.addAfter()</a>
</li><li><a href="addbefore.html">.addBefore()</a>
</li><li><a href="addfront.html">.addFront()</a>
</li><li><a href="animate.html">.animate()</a>
</li><li><a href="array.html">.array()</a>
</li><li><a href="call.html">.call()</a>
</li><li><a href="clone.html">.clone()</a>
</li><li><a href="collect.html">.collect()</a>
</li><li><a href="contains.html">.contains()</a>
</li><li><a href="dial.html">.dial()</a>
</li><li><a href="each.html">.each()</a>
</li><li><a href="endswith.html">.endsWith()</a>
</li><li><a href="equals.html">.equals()</a>
</li><li><a href="fill.html">.fill()</a>
</li><li><a href="filter.html">.filter()</a>
</li><li><a href="find.html">.find()</a>
</li><li><a href="findlast.html">.findLast()</a>
</li><li><a href="get.html">.get()</a>
</li><li><a href="ht.html">.ht()</a>
</li><li><a href="intersection.html">.intersection()</a>
</li><li><a href="is.html">.is()</a>
</li><li><a href="join.html">.join()</a>
</li><li><a href="keys.html">.keys()</a>
</li><li><a href="map.html">.map()</a>
</li><li><a href="offset.html">.offset()</a>
</li><li><a href="on.html">.on()</a>
</li><li><a href="onover.html">.onOver()</a>
</li><li><a href="only.html">.only()</a>
</li><li><a href="remove.html">.remove()</a>
</li><li><a href="replace.html">.replace()</a>
</li><li><a href="reverse.html">.reverse()</a>
</li><li><a href="select.html">.select()</a>
</li><li><a href="set.html">.set()</a>
</li><li><a href="sort.html">.sort()</a>
</li><li><a href="startswith.html">.startsWith()</a>
</li><li><a href="sub.html">.sub()</a>
</li><li><a href="text.html">.text()</a>
</li><li><a href="toobject.html">.toObject()</a>
</li><li><a href="toggle.html">.toggle()</a>
</li><li><a href="trav.html">.trav()</a>
</li><li><a href="trigger.html">.trigger()</a>
</li><li><a href="uniq.html">.uniq()</a>
</li><li><a href="unite.html">.unite()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="values.html">.values()</a>
</li><li><a href="ee.html">EE()</a>
</li><li><a href="html.html">HTML()</a>
</li><li><a href="M.html">M</a>
</li><li><a href="list.html">Minified Lists</a>
</li><li><a href="promiseClass.html">Promise</a>
</li><li><a href="underscore.html">_()</a>
</li><li><a href="bind.html">_.bind()</a>
</li><li><a href="copyobj.html">_.copyObj()</a>
</li><li><a href="dateadd.html">_.dateAdd()</a>
</li><li><a href="dateclone.html">_.dateClone()</a>
</li><li><a href="datediff.html">_.dateDiff()</a>
</li><li><a href="datemidnight.html">_.dateMidnight()</a>
</li><li><a href="eachobj.html">_.eachObj()</a>
</li><li><a href="escapehtml.html">_.escapeHtml()</a>
</li><li><a href="escaperegexp.html">_.escapeRegExp()</a>
</li><li><a href="filterobj.html">_.filterObj()</a>
</li><li><a href="formathtml.html">_.format()</a>
</li><li><a href="format.html">_.format()</a>
</li><li><a href="formatvalue.html">_.formatValue()</a>
</li><li><a href="isbool.html">_.isBool()</a>
</li><li><a href="isdate.html">_.isDate()</a>
</li><li><a href="isfunction.html">_.isFunction()</a>
</li><li><a href="islist.html">_.isList()</a>
</li><li><a href="isnumber.html">_.isNumber()</a>
</li><li><a href="isobject.html">_.isObject()</a>
</li><li><a href="isstring.html">_.isString()</a>
</li><li><a href="isvalue.html">_.isValue()</a>
</li><li><a href="mapobj.html">_.mapObj()</a>
</li><li><a href="pad.html">_.pad()</a>
</li><li><a href="parsedate.html">_.parseDate()</a>
</li><li><a href="parsenumber.html">_.parseNumber()</a>
</li><li><a href="partial.html">_.partial()</a>
</li><li><a href="range.html">_.range()</a>
</li><li><a href="template.html">_.template()</a>
</li><li><a href="tostring.html">_.toString()</a>
</li><li><a href="trim.html">_.trim()</a>
</li><li><a href="promise.html">promise()</a>
</li><li><a href="always.html">promise.always()</a>
</li><li><a href="error.html">promise.error()</a>
</li><li><a href="state.html">promise.state</a>
</li><li><a href="then.html">promise.then()</a>
</li><li><a href="require.html">require()</a>
</li><li><a href="/docs/howto.html">How to...</a></li></ul></div>

`
}
